<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/prototyping-playbook/feed.xml" rel="self" type="application/atom+xml" /><link href="/prototyping-playbook/" rel="alternate" type="text/html" /><updated>2017-05-14T14:11:29-04:00</updated><id>/prototyping-playbook/</id><title type="html">Prototyping Playbook</title><subtitle>A winner's guide to prototyping in the browser
</subtitle><entry><title type="html">Animate with Swagger (and Stagger)</title><link href="/prototyping-playbook/staggered-animations" rel="alternate" type="text/html" title="Animate with Swagger (and Stagger)" /><published>2017-05-12T09:00:00-04:00</published><updated>2017-05-12T09:00:00-04:00</updated><id>/prototyping-playbook/staggered-animations</id><content type="html" xml:base="/prototyping-playbook/staggered-animations">&lt;p&gt;Animations make the web a far more interesting place. In this post, we’ll learn how to roll our own staggered list animation with Vanilla JS and CSS. No frameworks or plugins. 60 frames-per-second or bust!&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;You’re building a health and fitness web application, and you’d like to enhance the UI by adding animation. You’ve designed a step-count leaderboard, but want each list item to fade in one after the other (staggering between each iteration).&lt;/p&gt;

&lt;h2 id=&quot;mockup&quot;&gt;Mockup&lt;/h2&gt;

&lt;div style=&quot;width:100%;height:0px;position:relative;padding-bottom:56.237%;&quot;&gt;&lt;iframe src=&quot;https://streamable.com/s/kts6b/rcvaxo&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; allowfullscreen=&quot;&quot; style=&quot;width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;

&lt;h3 id=&quot;designing--animating-the-bars&quot;&gt;Designing &amp;amp; Animating The Bars&lt;/h3&gt;

&lt;p&gt;From a design perspective, we’re building a horizontal bar chart (sorted by longest to shortest). Each bar has a dynamic &lt;strong&gt;width&lt;/strong&gt;, a fake &lt;strong&gt;name&lt;/strong&gt;, and a fake &lt;strong&gt;step count&lt;/strong&gt;. Instead of hard-coding each bar’s width as an inline style, we’ll assign a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;data-width&lt;/code&gt; attribute that can be read in our Javascript.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div
    data-width=&amp;quot;100&amp;quot;
    class=&amp;quot;bar mb2 h2 br4 flex items-center justify-between pr3&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;name mv0 fw6 f7 white&amp;quot;&amp;gt;
      &amp;lt;!-- Name to be set via Javascript --&amp;gt;
    &amp;lt;/h1&amp;gt;
    &amp;lt;h2 class=&amp;quot;steps mv0 fw4 f7 white-50&amp;quot;&amp;gt;
      &amp;lt;!-- Steps to be set via Javascript --&amp;gt;
    &amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where the magic happens, though, is the CSS for our &lt;code class=&quot;highlighter-rouge&quot;&gt;.bar&lt;/code&gt; class. We apply a gradient to make it look pretty, and add a keyframe animation that tweens the bar from zero to full opacity.&lt;/p&gt;

&lt;p&gt;You’ll note that we’re omitting both the &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-duration&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; property from our CSS. In the next step, you’ll see how we can use Javascript to add these values dynamically and give our animation a wonderful “staggered” effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB: You don’t need Javascript to achieve this effect. Sass / SCSS can help you get the same outcome&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.bar {
  animation: grow-bar cubic-bezier(0.23, 1, 0.32, 1) forwards;
  background: linear-gradient(to left, #004e92, #000428);
  opacity: 0;
}

@keyframes grow-bar {
  0% {
    width: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In our Javascript, we’re iterating over the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bar&lt;/code&gt; elements on the page, and performing a few actions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt; the bar’s &lt;code class=&quot;highlighter-rouge&quot;&gt;data-width&lt;/code&gt; attribute and &lt;strong&gt;set&lt;/strong&gt; the element’s width accordingly&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set&lt;/strong&gt; the bar’s &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-duration&lt;/code&gt; to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;BAR_ANIM_DURATION&lt;/code&gt;. By creating this variable, we can adjust the speed of our animation (for debugging/fine-tuning) by tweaking one variable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Calculate&lt;/strong&gt; and &lt;strong&gt;set&lt;/strong&gt; a staggered animation-delay via some simple arithmetic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/bar-delay.png&quot; alt=&quot;Dynamic Animation Delay&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that with each iteration of the &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;, loop, the &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; property increases ever-so-slightly, giving us a staggered effect. If we had hard-coded a constant value in our loop, the bars would all fade in at the exact same time.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let bars = document.querySelectorAll(&amp;#39;.bar&amp;#39;)
const NUM_ELEMENTS = bars.length
const BAR_ANIM_DURATION = .65

bars.forEach((bar, index) =&amp;gt; {
  // Read &amp;#39;data-width&amp;#39; and set the bar&amp;#39;s width
  bar.style.width = `${bar.getAttribute(&amp;#39;data-width&amp;#39;)}%`

  // Set &amp;#39;animation-duration&amp;#39;
  bar.style.animationDuration = `${BAR_ANIM_DURATION}s`

  // Calculate Staggered Delay
  let barDelay = index * (BAR_ANIM_DURATION / NUM_ELEMENTS)

  // Set Staggered Delay
  bar.style.animationDelay = `${barDelay}s`
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;animating-the-names&quot;&gt;Animating The Names&lt;/h3&gt;

&lt;p&gt;We’ll take a similar approach to animate the names inside of each bar. In our CSS, let’s add another keyframe animation that tweens each name from zero to full opacity, and moves it to a neutral X position.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.name {
  animation: slide-name ease forwards;
  opacity: 0;
}

@keyframes slide-name {
  0% {
    transform: translateX(-25px);
  }

  100% {
    opacity: 1;
    transform: translateX(0px);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned before, we can leverage our ability to &lt;a href=&quot;/prototyping-playbook/fake-it-til-you-make-it&quot; target=&quot;_blank&quot;&gt;work with fake data&lt;/a&gt; to assign a random name to each bar. Moreover, we can perform a similar calculation to stagger the animation of each name element.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// Animate names quicker than bars
const NAME_ANIM_DURATION = .25

bars.forEach((bar, index) =&amp;gt; {
  let name = bar.querySelector(&amp;#39;.name&amp;#39;)

  // Assign a fake name
  name.innerText = faker.name.findName()

  // Set &amp;#39;animation-duration&amp;#39;
  name.style.animationDuration = `${NAME_ANIM_DURATION}s`

  // Calculate Staggered Delay
  let barDelay = index * (BAR_ANIM_DURATION / NUM_ELEMENTS)
  let nameDelay = .15 + barDelay + (index * (NAME_ANIM_DURATION / NUM_ELEMENTS))

  // Set Staggered Delay
  name.style.animationDelay = `${nameDelay}s`
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;animating-the-step-counts&quot;&gt;Animating The Step Counts&lt;/h3&gt;

&lt;p&gt;By now, you should be a pro at this. Let’s add another keyframe animation that tweens each step count from zero to full opacity, and scales it up from quarter to full size.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.steps {
  animation: grow-steps ease forwards;
  opacity: 0;
}

@keyframes grow-steps {
  0% {
    transform: scale(.25);
  }

  100% {
    opacity: 1;
    transform: scale(1);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And in our Javascript, let’s perform that same calculation to create a staggered animation delay.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const STEPS_ANIM_DURATION = .25

bars.forEach((bar, index) =&amp;gt; {
  let steps = bar.querySelector(&amp;#39;.steps&amp;#39;)

  // Add a bogus step count
  steps.innerText = (NUM_ELEMENTS - index) * 1000

  // Set &amp;#39;animation-duration&amp;#39;
  steps.style.animationDuration = `${STEPS_ANIM_DURATION}s`

  // Calculate Staggered Delay
  let barDelay = index * (BAR_ANIM_DURATION / NUM_ELEMENTS)
  let nameDelay = .15 + barDelay + (index * (NAME_ANIM_DURATION / NUM_ELEMENTS))
  let stepsDelay = nameDelay + (index * (STEPS_ANIM_DURATION / NUM_ELEMENTS))

  // Set Staggered Delay
  steps.style.animationDelay = `${stepsDelay}s`
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;QvrwPW&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;QvrwPW&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/QvrwPW/&quot;&gt;QvrwPW&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Animations make the web a far more interesting place. In this post, we’ll learn how to roll our own staggered list animation with Vanilla JS and CSS. No frameworks or plugins. 60 frames-per-second or bust!</summary></entry><entry><title type="html">Fake it ‘til you Make it</title><link href="/prototyping-playbook/fake-it-til-you-make-it" rel="alternate" type="text/html" title="Fake it 'til you Make it" /><published>2017-05-05T16:23:10-04:00</published><updated>2017-05-05T16:23:10-04:00</updated><id>/prototyping-playbook/fake-it-til-you-make-it</id><content type="html" xml:base="/prototyping-playbook/fake-it-til-you-make-it">&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; an essay on the merit (or lack thereof) of using fake data in your prototype. Instead, this play gives you the tools you need to elevate your game from Lorem Ipsum to data that at least &lt;em&gt;resembles&lt;/em&gt; what will eventually go in the interface you’re building&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;You’ve mastered the art of &lt;a href=&quot;/prototyping-playbook/working-with-tabular-data&quot;&gt;working with tabular data&lt;/a&gt;. This time, though, you don’t have a CSV export handy, and need to populate a table with around ~25 rows of sample data. You know the general shape of the data, but need a means of generating it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/fake-data.png&quot; alt=&quot;The Final Product&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;
&lt;p&gt;As with the aforementioned play, we start by identifying a schema to represent the data. Each table row should show the user’s &lt;strong&gt;avatar&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;email&lt;/strong&gt;, and &lt;strong&gt;favorite color&lt;/strong&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let user = {
  name: &amp;#39;Matt Rothenberg&amp;#39;,
  avatar: &amp;#39;http://placehold.it/50x50&amp;#39;,
  email: &amp;#39;hello@mattrothenberg.com&amp;#39;,
  color: &amp;#39;#ffa2a2&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll leverage a tool called &lt;a href=&quot;https://github.com/marak/faker.js&quot; target=&quot;_blank&quot;&gt;Faker.js&lt;/a&gt; to generate as much fake data as we’d like. Faker can generate a wide variety of fake data, and offers an intuitive API for doing so. Let’s replace the hard-coded user object above with a &lt;em&gt;function&lt;/em&gt; that generates a fake user instead.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function buildFakeUser() {
  return {
    name: faker.internet.userName(),
    avatar: faker.internet.avatar(),
    email: faker.internet.email(),
    color: faker.internet.color()
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now when we call that function, we get a random user!&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let user = buildFakeUser()
console.log(user)
/*
  Object {
    name: &amp;quot;Mae65&amp;quot;
    avatar: &amp;quot;https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg&amp;quot;,
    email: &amp;quot;Arch_Considine@yahoo.com&amp;quot;,
    color: &amp;quot;#1b327b&amp;quot;,
  }
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our data set is ready. Let’s get to prototyping!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build a list of fake users&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let users = []

for (var i = 0; i &amp;lt; 25; i++) {
  users.push( buildFakeUser() )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Write a function that takes a user object and returns the corresponding table row markup (interpolating the &lt;strong&gt;avatar&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, and &lt;strong&gt;email&lt;/strong&gt;, and &lt;strong&gt;color&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function generateTableRow (user) {
  return `
    &amp;lt;tr&amp;gt;
      &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;img class=&amp;quot;br-100 w2 h2 mr2&amp;quot; src=&amp;quot;${user.avatar}&amp;quot;/&amp;gt;
          ${user.name}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
      &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        ${user.email}
      &amp;lt;/td&amp;gt;
      &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;div
            class=&amp;quot;w1 h1 mr2&amp;quot;
            style=&amp;quot;background-color: ${user.color}&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;
          ${user.color}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  `
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate over our Array of users using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;&lt;sup id=&quot;fnref:foreach&quot;&gt;&lt;a href=&quot;#fn:foreach&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;users.forEach(user =&amp;gt; {
  let tableRow = generateTableRow(user)
  tableBody.insertAdjacentHTML(&amp;quot;beforeend&amp;quot;, tableRow)
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;wdrVgM&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Fake Data - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/wdrVgM/&quot;&gt;Fake Data - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationvue-js&quot;&gt;Implementation — Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance, taking note to:
    &lt;ul&gt;
      &lt;li&gt;Initialize an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; array on the instance’s data property&lt;/li&gt;
      &lt;li&gt;Hook into the instance’s &lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt; life cycle event in order to fill the &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; array with fake data&lt;sup id=&quot;fnref:lifecycle&quot;&gt;&lt;a href=&quot;#fn:lifecycle&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;quot;#app&amp;quot;,
  data: {
    users: []
  },
  created: function() {
    for (var i = 0; i &amp;lt; 25; i++) {
      this.users.push(buildFakeUser());
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Define a &lt;code class=&quot;highlighter-rouge&quot;&gt;user-table-row&lt;/code&gt; component to represent a given row of fake user data&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;#39;user-table-row&amp;#39;, {
  props: [&amp;#39;user&amp;#39;],
  template: `
  &amp;lt;tr&amp;gt;
    &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
        &amp;lt;img class=&amp;quot;br-100 w2 h2 mr2&amp;quot; :src=&amp;quot;user.avatar&amp;quot;/&amp;gt;

      &amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
  
    &amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
        &amp;lt;div
          class=&amp;quot;w1 h1 mr2&amp;quot;
          v-bind:style=&amp;quot;{backgroundColor: user.color}&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
        
      &amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
`
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate over the instance’s &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; property in our template using &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; syntax. Due to a template parsing caveat in Vue, we must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; attribute to define which component should be rendered.&lt;sup id=&quot;fnref:caveat&quot;&gt;&lt;a href=&quot;#fn:caveat&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;tbody&amp;gt;
  &amp;lt;tr is=&amp;quot;user-table-row&amp;quot; v-for=&amp;quot;user in users&amp;quot; :user=&amp;quot;user&amp;quot;&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;gWXoZP&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Fake Data - Vue JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/gWXoZP/&quot;&gt;Fake Data - Vue JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTable&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;It should accept an array of users as a property&lt;/li&gt;
      &lt;li&gt;It should render a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTableRow&lt;/code&gt; component for each user in the &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const UserTable = ({users}) =&amp;gt; {
  return(
    &amp;lt;table className=&amp;quot;bg-white w-100 data-table f6&amp;quot; cellspacing=&amp;quot;0&amp;quot;&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th className=&amp;quot;tl pa3 bb b--black-10&amp;quot;&amp;gt;User&amp;lt;/th&amp;gt;
          &amp;lt;th className=&amp;quot;tl pa3 bb b--black-10&amp;quot;&amp;gt;Email&amp;lt;/th&amp;gt;
          &amp;lt;th className=&amp;quot;tl pa3 bb b--black-10&amp;quot;&amp;gt;Fav Color&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/thead&amp;gt;
      &amp;lt;tbody&amp;gt;
        {
          users.map(function (user) {
            return &amp;lt;UserTableRow user={user}&amp;gt;&amp;lt;/UserTableRow&amp;gt;
          })
        }
      &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create another stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTableRow&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;It should accept a single user object as a property&lt;/li&gt;
      &lt;li&gt;It should render out &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; markup accordingly&lt;/li&gt;
      &lt;li&gt;In React, the HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. At the top of our render function, we can build that object by interpolating the &lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt; attribute on our user prop.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const UserTableRow = ({user}) =&amp;gt; {
  let favColorStyle = {
    backgroundColor: user.color
  }
  return (
    &amp;lt;tr&amp;gt;
      &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;img className=&amp;quot;br-100 w2 h2 mr2&amp;quot; src={user.avatar}/&amp;gt;
          {user.name}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
      &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        {user.email}
      &amp;lt;/td&amp;gt;
      &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;w1 h1 mr2&amp;quot; style={favColorStyle}&amp;gt;&amp;lt;/div&amp;gt;
          {user.color}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;JNOLdR&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-preview=&quot;true&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Fake Data - React JS&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/JNOLdR/&quot;&gt;Fake Data - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:foreach&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=example&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:foreach&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lifecycle&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks&quot; target=&quot;_blank&quot;&gt;Vue Lifecycle Events&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:lifecycle&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:caveat&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/components.html#DOM-Template-Parsing-Caveats&quot; target=&quot;_blank&quot;&gt;Template Parsing Caveat&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:caveat&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">This is not an essay on the merit (or lack thereof) of using fake data in your prototype. Instead, this play gives you the tools you need to elevate your game from Lorem Ipsum to data that at least resembles what will eventually go in the interface you’re building</summary></entry><entry><title type="html">Working with Tabular Data</title><link href="/prototyping-playbook/working-with-tabular-data" rel="alternate" type="text/html" title="Working with Tabular Data" /><published>2017-05-04T16:23:10-04:00</published><updated>2017-05-04T16:23:10-04:00</updated><id>/prototyping-playbook/working-with-data</id><content type="html" xml:base="/prototyping-playbook/working-with-tabular-data">&lt;p&gt;Designing tables in Sketch can be downright frustrating. And despite the myriad plugins that advertise “[an] easy way to populate your design with meaningful data,” I’m convinced that code is often a better tool for the job. This play will get you up and iterating over data sets with Javascript, like a pro, in ~5 minutes.&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Let’s suppose you’re designing a dashboard and you need to turn a raw, CSV export of project data into a beautiful table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/working-with-data.png&quot; alt=&quot;The Final Product&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;
&lt;p&gt;The key to this play is identifying a schema to represent your data. Luckily, if you have a CSV dump to work with, the schema is likely right before your eyes.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;Name,Budget,Lead
Uber for Cats,$1,000,000,Jane Smith
Twitter for Puppies,$10,000,000,John Doe
Lyft for Fish,$15,000,000,Sally Stevenson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each row of data has a &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;budget&lt;/strong&gt;, and &lt;strong&gt;lead&lt;/strong&gt;. And so, we can represent any given row of our dataset as a Javascript Object, using those descriptors as properties:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let project = {
  name: &amp;#39;Uber for Cats&amp;#39;,
  budget: &amp;#39;$1,000,000&amp;#39;,
  lead: &amp;#39;Jane Smith&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, we can collect each individual project object in a Javascript Array:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let projects = [
  {
    name: &amp;#39;Uber for Cats&amp;#39;,
    budget: &amp;#39;$1,000,000&amp;#39;,
    lead: &amp;#39;Jane Smith&amp;#39;
  },
  {
    name: &amp;#39;Twitter for Puppies&amp;#39;,
    budget: &amp;#39;$10,000,000&amp;#39;,
    lead: &amp;#39;John Doe&amp;#39;
  },
  {
    name: &amp;#39;Lyft for Fish&amp;#39;,
    budget: &amp;#39;$15,000,000&amp;#39;,
    lead: &amp;#39;Sally Stevenson&amp;#39;
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’re done with the hard part. Let’s see how to get this list of projects onto the page.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Iterate over our Array of projects using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;&lt;sup id=&quot;fnref:foreach&quot;&gt;&lt;a href=&quot;#fn:foreach&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;For each project, build a template literal that represents a table row, interpolating the &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;budget&lt;/strong&gt;, and &lt;strong&gt;lead&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;let tableRow = `
&amp;lt;tr&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
    ${project.name}
  &amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
    ${project.budget}
  &amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
    ${project.lead}
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
`&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Insert the newly created table row into the DOM using &lt;code class=&quot;highlighter-rouge&quot;&gt;insertAdjacentHTML&lt;/code&gt;&lt;sup id=&quot;fnref:insertadjacent&quot;&gt;&lt;a href=&quot;#fn:insertadjacent&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;mmmmYY&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Table - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/mmmmYY/&quot;&gt;Table - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementation---vue-js&quot;&gt;Implementation - Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance, passing our array of projects to its data attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Vue({
  el: &amp;#39;#app&amp;#39;,
  data: {
    projects: [
      {
        name: &amp;#39;Uber for Cats&amp;#39;,
        budget: &amp;#39;$1,000,000&amp;#39;,
        lead: &amp;#39;Jane Smith&amp;#39;
      },
      // etcetera
    ]
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; syntax in our HTML to iterate over our array of projects and display each one&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;tr v-for=&amp;quot;project in projects&amp;quot;&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{{ project.name }}&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{{ project.budget }}&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{{ project.lead }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;RVVgrX&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-preview=&quot;true&quot; data-pen-title=&quot;Table - Vue.js&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/RVVgrX/&quot;&gt;Table - Vue.js&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ProjectsTable&amp;gt;&lt;/code&gt; . This component should accept a list of projects as a property.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;const ProjectsTable = ({projects}) =&amp;gt; (
  // nothing to see here
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Map over the list of projects and return a table row for each, interpolating the name, budget, and lead.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;tbody&amp;gt;
  {
    projects.map((project) =&amp;gt; {
      return(
        &amp;lt;tr&amp;gt;
          &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{ project.name }&amp;lt;/td&amp;gt;
          &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{ project.budget }&amp;lt;/td&amp;gt;
          &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{ project.lead }&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      )
    })
  }
&amp;lt;/tbody&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;wddeWG&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Table - React JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/wddeWG/&quot;&gt;Table - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:foreach&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=example&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:foreach&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:insertadjacent&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertAdjacentHTML&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:insertadjacent&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Designing tables in Sketch can be downright frustrating. And despite the myriad plugins that advertise “[an] easy way to populate your design with meaningful data,” I’m convinced that code is often a better tool for the job. This play will get you up and iterating over data sets with Javascript, like a pro, in ~5 minutes.</summary></entry><entry><title type="html">Componentization</title><link href="/prototyping-playbook/componentization" rel="alternate" type="text/html" title="Componentization" /><published>2017-05-04T16:23:10-04:00</published><updated>2017-05-04T16:23:10-04:00</updated><id>/prototyping-playbook/componentization</id><content type="html" xml:base="/prototyping-playbook/componentization">&lt;p&gt;In programs like Sketch, we keep things DRY (“don’t repeat yourself”) by turning our design decisions into “symbols.” It’s no different in front-end land, so this play will introduce you to a few different ways of encapsulating your designs as “components.”&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Let’s suppose you’re designing an activity feed for a social networking application. You’ve designed a “card” in Sketch that represents a single item in the feed, but you want to verify that your design works at scale, given a sample set of data.&lt;/p&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;
&lt;p&gt;You’ve figured out that the following chunk of markup produces a single, beautiful, “card.”&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div class=&amp;quot;bg-white ba b--black-10 pa3&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;flex&amp;quot;&amp;gt;
    &amp;lt;img class=&amp;quot;mr2&amp;quot; src=&amp;quot;...&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;h1 class=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;Paul Smith&amp;lt;/h1&amp;gt;
      &amp;lt;ul class=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
        &amp;lt;li class=&amp;quot;dib black-50&amp;quot;&amp;gt;3 mins&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;p class=&amp;quot;f3 fw3 mt3 mb0&amp;quot;&amp;gt;
    What a time to be alive! So many front-end resources,
    so little time...
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mockup&quot;&gt;Mockup&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/component-card.png&quot; alt=&quot;The Final Product&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Having read the play on tabular data, you’ve also identified a schema to represent your activity feed.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let posts = [
  {
    name: &amp;quot;Paul Smith&amp;quot;,
    timeago: &amp;quot;3 mins&amp;quot;,
    avatar: &amp;quot;http://placehold.it/50x50&amp;quot;,
    status: &amp;quot;What a time to be alive! So many front-end resources...&amp;quot;
  },
  {
    name: &amp;quot;Jane Doe&amp;quot;,
    timeago: &amp;quot;1 hour&amp;quot;,
    avatar: &amp;quot;http://placehold.it/50x50&amp;quot;,
    status: &amp;quot;Does anyone actually use Facebook stories?&amp;quot;
  },
  {
    name: &amp;quot;Alex Jackson&amp;quot;,
    timeago: &amp;quot;2 hours&amp;quot;,
    avatar: &amp;quot;http://placehold.it/50x50&amp;quot;,
    status: &amp;quot;Best slice of pizza in NYC? Go.&amp;quot;
  }
];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With our schema in place, let’s get to the implementations.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write a function that takes a post object and returns a chunk of markup with the &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;timeago&lt;/strong&gt;, &lt;strong&gt;avatar&lt;/strong&gt;, and &lt;strong&gt;status&lt;/strong&gt; properties interpolated accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function post_markup(post) {
  return `
  &amp;lt;div class=&amp;quot;bg-white ba b--black-10 pa3 mb3&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;flex&amp;quot;&amp;gt;
      &amp;lt;img class=&amp;quot;mr2&amp;quot; src=&amp;quot;${post.avatar}&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;h1 class=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;${post.name}&amp;lt;/h1&amp;gt;
        &amp;lt;ul class=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
          &amp;lt;li class=&amp;quot;dib black-50&amp;quot;&amp;gt;${post.timeago}&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;f3 fw3 mv3&amp;quot;&amp;gt;${post.status}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
`
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate over the array of posts using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;&lt;sup id=&quot;fnref:foreach&quot;&gt;&lt;a href=&quot;#fn:foreach&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;For each post, call the &lt;code class=&quot;highlighter-rouge&quot;&gt;post_markup&lt;/code&gt; function and insert the return value into the DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;posts.forEach(post =&amp;gt; {
  let postElement = post_markup(post)
  stage.insertAdjacentHTML(&amp;quot;beforeend&amp;quot;, postElement);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;JNWoZN&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Componentization - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/JNWoZN/&quot;&gt;Componentization - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationvue-js&quot;&gt;Implementation — Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance, passing our array of posts to its &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;quot;#app&amp;quot;, // DOM element that wraps our list
  data: {
    posts: posts // our posts array from earlier
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Define a Post component that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; object as its sole property and renders our post markup accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;quot;Post&amp;quot;, { // so we can access it in our markup
  props: [&amp;quot;post&amp;quot;], // each post component gets a post :)
  template: `
    &amp;lt;div class=&amp;quot;bg-white ba b--black-10 pa3 mb3&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;flex&amp;quot;&amp;gt;
        &amp;lt;img class=&amp;quot;mr2&amp;quot; :src=&amp;quot;post.avatar&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h1 class=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt;
          &amp;lt;ul class=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
            &amp;lt;li class=&amp;quot;dib black-50&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;p class=&amp;quot;f3 fw3 mv3&amp;quot;&amp;gt;
        
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  ` // please render this template
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Post/&amp;gt;&lt;/code&gt; component to our HTML, and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; directive to iterate over our global array of posts&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;Post v-for=&amp;quot;post in posts&amp;quot; :post=&amp;quot;post&amp;quot;&amp;gt;&amp;lt;/Post&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;zwZGxz&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Componentization - Vue JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/zwZGxz/&quot;&gt;Componentization - Vue JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Post&amp;gt;&lt;/code&gt; that accepts one post as a property&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const Post = ({post}) =&amp;gt; {
  return(
    &amp;lt;div className=&amp;quot;bg-white ba b--black-10 pa3 mb3&amp;quot;&amp;gt;
      &amp;lt;div className=&amp;quot;flex&amp;quot;&amp;gt;
        &amp;lt;img className=&amp;quot;mr2&amp;quot; src={post.avatar} alt=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h1 className=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;{post.name}&amp;lt;/h1&amp;gt;
          &amp;lt;ul className=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
            &amp;lt;li className=&amp;quot;dib black-50&amp;quot;&amp;gt;{post.timeago}&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;p className=&amp;quot;f3 fw3 mv3&amp;quot;&amp;gt;
        { post.status }
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Make another stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;PostList&amp;gt;&lt;/code&gt; that accepts an &lt;em&gt;array&lt;/em&gt; of posts as a property and maps over it, returning individual &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Post&amp;gt;&lt;/code&gt; components accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const PostList = ({posts}) =&amp;gt; {
  return(
    &amp;lt;div&amp;gt;
      {
        posts.map((post) =&amp;gt; {
          return &amp;lt;Post post={post}/&amp;gt;
        })
      }
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;PmpwrV&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-preview=&quot;true&quot; data-pen-title=&quot;Componentization - React JS&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/PmpwrV/&quot;&gt;Componentization - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:foreach&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=example&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:foreach&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">In programs like Sketch, we keep things DRY (“don’t repeat yourself”) by turning our design decisions into “symbols.” It’s no different in front-end land, so this play will introduce you to a few different ways of encapsulating your designs as “components.”</summary></entry><entry><title type="html">Simulating Asynchronous Events</title><link href="/prototyping-playbook/simulating-async-events" rel="alternate" type="text/html" title="Simulating Asynchronous Events" /><published>2017-05-04T16:23:10-04:00</published><updated>2017-05-04T16:23:10-04:00</updated><id>/prototyping-playbook/async-events</id><content type="html" xml:base="/prototyping-playbook/simulating-async-events">&lt;p&gt;Page refreshes are &lt;em&gt;so&lt;/em&gt; 2005. Single page applications (SPA) are the new hotness, and offer a variety of design challenges. One such challenge is letting users know what’s happening while a request (e.g., a form submission) does it thing. This play will give you the fundamentals needed to prototype such situations.&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;Let’s suppose you’re designing a SPA. You want to introduce a pattern where a button that triggers an asynchronous event behind the scenes shows a spinner for the duration of the request.&lt;/p&gt;

&lt;div style=&quot;width: 100%; height: 0px; position: relative; padding-bottom: 39.697%;&quot;&gt;&lt;iframe src=&quot;https://streamable.com/s/vggdh/zeqdud&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; allowfullscreen=&quot;&quot; style=&quot;width: 100%; height: 100%; position: absolute;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;

&lt;p&gt;The key here is to understand the “states” in which our button will live.&lt;/p&gt;

&lt;p&gt;In its &lt;strong&gt;default&lt;/strong&gt; state, the button will show the text “Submit Form”. In its &lt;strong&gt;loading&lt;/strong&gt; state, the button will hide that text and show a spinner instead.&lt;/p&gt;

&lt;p&gt;And so, we can mark up our button accordingly, wrapping the “Submit Form” text in a span tag with the class &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;, and the spinner in a span tag with the class &lt;code class=&quot;highlighter-rouge&quot;&gt;spinner&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;button class=&amp;quot;bg-blue bn white tc h3 fw6 w-100 relative&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;label&amp;quot;&amp;gt;Submit Form&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;spinner absolute top-1 bottom-1 left-0 right-0&amp;quot;&amp;gt;
    &amp;lt;!-- fancy SVG spinner goes here  --&amp;gt;
  &amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For simplicity’s sake, we can choreograph the hiding of the label / display of the spinner by toggling the class &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; on the parent button tag.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-sass&quot;&gt;button .spinner {
  opacity: 0; // Hide the spinner by default
  transition: opacity .2s ease-out;
}
button .label {
  display: block; // Show the label by default
}
button.is-loading {
  .label {
    display: none; // Hide the label when button &amp;#39;is-loading&amp;#39;
  }
  .spinner {
    opacity: 1; // Show the spinner when button &amp;#39;is-loading&amp;#39;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, we can use Javascript to trigger this choreography on &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt; of our button.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;showSpinner&lt;/code&gt;. The function should do a few things:
    &lt;ul&gt;
      &lt;li&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class to our button — kicking off the choreography described above.&lt;/li&gt;
      &lt;li&gt;Remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class after a duration of two seconds&lt;/li&gt;
      &lt;li&gt;Set the &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled&lt;/code&gt; attribute on our button to true while the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class is present, to prevent users from repeatedly triggering the sequence.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function showSpinner() {
  let button = this
  let isEnabled = !button.disabled; // Is the button enabled?

  if (isEnabled) { // If so
    button.disabled = true // Disable the button
    button.classList.toggle(&amp;#39;is-loading&amp;#39;) // Toggle the class

    setTimeout(() =&amp;gt; { // And do the following after 2 seconds
      button.classList.toggle(&amp;#39;is-loading&amp;#39;) // Toggle the class
      button.disabled = false // Enable the button
    }, 2000)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt; event listener to our button which calls the showSpinner function.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// Thou shalt do my bidding when clicked
button.addEventListener(&amp;#39;click&amp;#39;, showSpinner)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;qmmXoN&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Asynchronous Events - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/qmmXoN/&quot;&gt;Asynchronous Events - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationvue-js&quot;&gt;Implementation — Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance and add a data property called &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; to represent our button’s loading state&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;#39;#app&amp;#39;,
  data: {
    loading: false // Button shouldn&amp;#39;t spin by default :)
  },
  methods: {
    // nothing to see here
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Mark up our button, adding the following:
    &lt;ul&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; directive to which we can eventually attach an event listener&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;:disabled&lt;/code&gt; attribute that we can enable/disable the button as a function of the loading state&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;:class&lt;/code&gt; directive so that we can dynamically toggle the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class with respect to our loading state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;button
  @click=&amp;quot;submitForm&amp;quot;
  :disabled=&amp;quot;loading&amp;quot;
  v-bind:class=&amp;quot;{&amp;#39;is-loading&amp;#39;: loading}&amp;quot;
  class=&amp;quot;bg-blue bn white tc h3 fw6 w-100 relative&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;submitForm&lt;/code&gt; method and add it to our instance’s methods property. Like in the previous example, this method should add the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class and remove it after a duration of two seconds&lt;/li&gt;
  &lt;li&gt;Fortunately, and thanks to Vue’s two-way data binding, we no longer have to manually set our button’s &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled&lt;/code&gt; attribute since it’s a function of our instance’s state&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;methods: {
  submitForm: function() {
    let self = this;
    self.loading = true; // set the instance&amp;#39;s loading state to true

    setTimeout(() =&amp;gt; {
      self.loading = false; // set it to false
    }, 2000) // After two seconds
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;zwwpzO&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Asynchronous Events - Vue JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/zwwpzO/&quot;&gt;Asynchronous Events - Vue JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scaffold a React component (using the traditional &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; syntax) to represent our button&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;class SpinnerButton extends React.Component {
  constructor () {
    super ()

    this.state = { // Similar to Vue&amp;#39;s &amp;#39;data&amp;#39; property
      loading: false
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Implement our component’s &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method to appease the React gods. Note that we’re only adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class when our state’s &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; attribute is truthy.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;render () {
  let buttonClass

  this.state.loading ? // Are you loading?
    buttonClass = &amp;#39;is-loading&amp;#39; : // If so, add &amp;#39;is-loading&amp;#39; class
    buttonClass = &amp;#39;&amp;#39;

  return(
    &amp;lt;button
      disabled={this.state.loading} // Disable if loading
      className={&amp;quot;bg-blue bn white tc h3 fw6 w-100 relative &amp;quot; + buttonClass}&amp;gt; // Dynamically add the &amp;#39;is-loading&amp;#39; class
       {&amp;lt;!-- implementation details --&amp;gt;}
    &amp;lt;/button&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add an &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; handler to our button, and implement the function it calls&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;button onClick={this.submitForm.bind(this)}&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;submitForm () {
  let self = this
  self.toggleSpinner()

  setTimeout(() =&amp;gt; {
    self.toggleSpinner()
  }, 2000)
}
toggleSpinner () {
  this.setState({
    loading: !this.state.loading
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;oWWpGz&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Asynchronous Events - React JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/oWWpGz/&quot;&gt;Asynchronous Events - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Page refreshes are so 2005. Single page applications (SPA) are the new hotness, and offer a variety of design challenges. One such challenge is letting users know what’s happening while a request (e.g., a form submission) does it thing. This play will give you the fundamentals needed to prototype such situations.</summary></entry></feed>