<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/prototyping-playbook/feed.xml" rel="self" type="application/atom+xml" /><link href="/prototyping-playbook/" rel="alternate" type="text/html" /><updated>2017-05-15T15:22:17-04:00</updated><id>/prototyping-playbook/</id><title type="html">Prototyping Playbook</title><subtitle>A winner's guide to prototyping in the browser
</subtitle><entry><title type="html">Prototyping Instagram’s Filter UX</title><link href="/prototyping-playbook/instagram-prototype" rel="alternate" type="text/html" title="Prototyping Instagram's Filter UX" /><published>2017-05-12T09:00:00-04:00</published><updated>2017-05-12T09:00:00-04:00</updated><id>/prototyping-playbook/instagram-prototype</id><content type="html" xml:base="/prototyping-playbook/instagram-prototype">&lt;p&gt;To those who claim you can’t prototype mobile user interfaces with the tools of the web, I raise you the following tutorial. In this play, we’ll use Vue JS to re-create a workflow from Instagram’s mobile app: uploading a photo and applying a filter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: this is a long-form tutorial, so feel free to tackle it at your own pace.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;You’re convinced that the sky is the limit when it comes to prototyping with HTML, CSS, and Javascript. You tell your friends that you can prototype the “Apply Filter” workflow from Instagram’s mobile app in under an hour. Go.&lt;/p&gt;

&lt;h2 id=&quot;mockup&quot;&gt;Mockup&lt;/h2&gt;
&lt;div style=&quot;width: 100%; height: 0px; position: relative; padding-bottom: 55.625%;&quot;&gt;&lt;iframe src=&quot;https://streamable.com/s/gayvr/hpvrww&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; allowfullscreen=&quot;&quot; style=&quot;width: 100%; height: 100%; position: absolute;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;

&lt;p&gt;The best advice I can give you (or anyone else who’s looking to become a stronger prototyper) is &lt;strong&gt;don’t re-invent the wheel.&lt;/strong&gt; As this advice relates to the task at hand, the first thing we should do is identify libraries and plugins that give us some of the functionality from the mockup above. My gut tells me there will be four particularly tricky features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The touch-enabled, draggable carousel of photo filters&lt;/li&gt;
  &lt;li&gt;The photo filters themselves&lt;/li&gt;
  &lt;li&gt;The touch-enabled slider to adjust the strength of the chosen filter&lt;/li&gt;
  &lt;li&gt;The fade transitions throughout the workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seriously. A quick Google search for a library or plugin &lt;em&gt;far&lt;/em&gt; outweighs a futile attempt to hand-roll this functionality yourself. I’ve identified the following libraries that will help us with today’s task.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://flickity.metafizzy.co/&quot; target=&quot;_blank&quot;&gt;Flickity&lt;/a&gt; – a library for creating “touch, responsive, flickable carousels”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://una.im/CSSgram/&quot; target=&quot;_blank&quot;&gt;CSSGram&lt;/a&gt; – a library for recreating Instagram filters with CSS filters and blend modes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://refreshless.com/nouislider/&quot; target=&quot;_blank&quot;&gt;noUISlider&lt;/a&gt; – a lightweight JavaScript range slider&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://daneden.github.io/animate.css/&quot; target=&quot;_blank&quot;&gt;Animate.css&lt;/a&gt; – Just-add-water CSS animations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get to coding.&lt;/p&gt;

&lt;h2 id=&quot;step-1-scaffold-the-project&quot;&gt;Step 1: Scaffold the Project&lt;/h2&gt;

&lt;p data-height=&quot;547&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;xdzwQo&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Step 1: Scaffold Vue Instance [Instagram Prototype]&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/mattrothenberg/pen/xdzwQo/&quot;&gt;Step 1: Scaffold Vue Instance [Instagram Prototype]&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As mentioned above, we’ll be using Vue JS to build the prototype. By now, you should be a pro at scaffolding Vue instances. As a refresher,
let’s add the following combination of markup and Javascript to the mix.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div class=&amp;quot;wrap vh-100 overflow-hidden&amp;quot; id=&amp;quot;instagram&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;phone relative bg-white w-100 h-100&amp;quot;&amp;gt;
    {{ testMessage }}
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;#39;#instagram&amp;#39;,
  data: {
    testMessage: &amp;#39;Nothing to see here...&amp;#39;
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Believe it or not, the code above will serve as the foundation for the rest of tutorial. We’ll soon begin to see some magical coordination between our parent Vue instance, and the components we build along the way.&lt;/p&gt;

&lt;h2 id=&quot;step-2-implement-the-photo-upload-feature&quot;&gt;Step 2: Implement the Photo Upload Feature&lt;/h2&gt;

&lt;p data-height=&quot;482&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;XRYmLQ&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Step 2: Implement Photo Upload [Instagram Prototype]&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/mattrothenberg/pen/XRYmLQ/&quot;&gt;Step 2: Implement Photo Upload [Instagram Prototype]&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;game-plan&quot;&gt;Game Plan&lt;/h3&gt;

&lt;p&gt;There’s a lot going on here, so let’s try to break down the feature into steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User &lt;strong&gt;clicks&lt;/strong&gt; an empty state &lt;strong&gt;component&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;User is prompted to select a photo via the &lt;strong&gt;native file dialog&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;User selects a photo&lt;/li&gt;
  &lt;li&gt;User then sees the selected photo &lt;strong&gt;instead&lt;/strong&gt; of the empty state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason why I put some of the above words in &lt;strong&gt;bold&lt;/strong&gt; is because they should trigger associations in your Vue JS brain.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Click&lt;/strong&gt;: we’re probably going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; directive&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Component&lt;/strong&gt;: we’re probably going to encapuslate markup and state into a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;component&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Native File Dialog&lt;/strong&gt;: we’re probably going to need an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;file&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Instead&lt;/strong&gt;: we’re probably going to need to conditionally render some content with &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s kick things off by creating a component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;empty-state&amp;gt;&lt;/code&gt;. This component is responsible for rendering a box with a dashed border–our “empty state”–as well as a hidden &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;file&quot;&lt;/code&gt;&amp;gt;.&lt;/p&gt;

&lt;p&gt;Why a hidden input? It is notoriously difficult to style HTML5 file inputs. One workaround involves putting an input in the DOM and hiding it with CSS. In order for the browser to open the native file dialog, this input must receive a click event. How it gets clicked, and how the client then handles what the user uploads, though, is totally up to us.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div
  class=&amp;quot;...&amp;quot;
  @click=&amp;quot;triggerFilePicker&amp;quot;&amp;gt;
  &amp;lt;input
    ref=&amp;quot;upload&amp;quot;
    @change=&amp;quot;handlePhotoUpload&amp;quot;
    class=&amp;quot;hide&amp;quot;  type=&amp;quot;file&amp;quot;&amp;gt;
  &amp;lt;h2 class=&amp;quot;fw5 mv0 black-30&amp;quot;&amp;gt;Click to upload a photo&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.hide {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;event-handling&quot;&gt;Event Handling&lt;/h3&gt;

&lt;p&gt;We don’t want users to &lt;em&gt;see&lt;/em&gt; the vanilla file input; instead, we want the entire empty state to be clickable. So, we can add an &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; directive to the outermost div in our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;empty-state&amp;gt;&lt;/code&gt; component. The function that we provide to this directive, &lt;code class=&quot;highlighter-rouge&quot;&gt;triggerFilePicker()&lt;/code&gt;, is just responsible for sending a click event to the hidden file input so that the native file picker pops up.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;methods: {
  // &amp;#39;refs&amp;#39; is an easy way to keep track of
  // different elements in your component
  triggerFilePicker: function () {
    this.$refs.upload.click()
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Getting the native file picker to appear is one thing. Handling the user’s photo selection is another. To accomplish that task, we can add an &lt;code class=&quot;highlighter-rouge&quot;&gt;@change&lt;/code&gt; directive to the file input itself. The function that we provide to this directive is called after a user has selected photo from their computer. In our case, we want to encode the selected photo as a base64 string, and immediately &lt;code class=&quot;highlighter-rouge&quot;&gt;$emit&lt;/code&gt; that information back to the parent Vue instance (since it is responsible for all things “state management” in our prototype).&lt;/p&gt;

&lt;p&gt;In our case, we want to &lt;strong&gt;$emit&lt;/strong&gt; that information back to our parent Vue instance, who is responsible for responsible for all-things-state-management in our prototype.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;methods: {
  handlePhotoUpload: function (e) {
    let self = this
    let reader = new FileReader()
    reader.onload = function(e) {
      // phone home with the base64 string
      self.$emit(&amp;#39;photo-uploaded&amp;#39;, e.target.result)
    }
    reader.readAsDataURL(e.target.files[0])
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;child-component-️-parent-instance-communication&quot;&gt;Child Component ↔️ Parent Instance Communication&lt;/h3&gt;

&lt;p&gt;Any time we emit an event from a child component, we &lt;strong&gt;must&lt;/strong&gt; do two more things.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Define a method on our Vue instance that is responsible for handling the emitted event&lt;/li&gt;
  &lt;li&gt;Pass that method down to the child component using the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; directive&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As mentioned above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;photo-uploaded&lt;/code&gt; event is responsible for emitting the base64 encoded photo string back to the parent instance. Currently, though, our parent instance doesn’t have any state. Let’s add a &lt;code class=&quot;highlighter-rouge&quot;&gt;photo&lt;/code&gt; key to the instance’s data field, initialize it as an empty string, and define a method &lt;code class=&quot;highlighter-rouge&quot;&gt;setPhoto&lt;/code&gt; that sets the emitted base64 string to this property.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// etcetera
  data: {
    photo: &amp;#39;&amp;#39;,
  },
  methods: {
    setPhoto: function (photoString) {
      this.photo = photoString
    }
  }
// etcetera&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, when we place the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;empty-state&amp;gt;&lt;/code&gt; component into our markup, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; directive to map the name of emitted event to the appropriate handler method from our parent instance.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;!-- we emit &amp;#39;photo-uploaded&amp;#39; --&amp;gt;
&amp;lt;!-- we want &amp;#39;setPhoto&amp;#39; to be called --&amp;gt;
&amp;lt;empty-state v-on:photo-uploaded=&amp;quot;setPhoto&amp;quot;&amp;gt;&amp;lt;/empty-state&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;conditional-rendering&quot;&gt;Conditional Rendering&lt;/h3&gt;

&lt;p&gt;Finally, we want to hide the empty state once a user has uploaded a photo. Vue offers a handful of template directives (v-if, v-show, v-else) to help you show and hide content conditionally. Each directive takes a Javascript expression that gets evaluated and renders the attached content accordingly.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;empty-state
  v-if=&amp;quot;noPhotoUploaded&amp;quot;
  v-on:photo-uploaded=&amp;quot;setPhoto&amp;quot;&amp;gt;
&amp;lt;/empty-state&amp;gt;
&amp;lt;img
  v-if=&amp;quot;photoUploaded&amp;quot;
  :src=&amp;quot;photo&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Those Javascript expressions, &lt;code class=&quot;highlighter-rouge&quot;&gt;noPhotoUploaded&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;photoUploaded&lt;/code&gt;, don’t exist yet. Let’s define them as computed properties on our parent Vue instance, since their values are &lt;em&gt;functions&lt;/em&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;photo&lt;/code&gt; attribute on our instance’s data model.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;computed: {
  noPhotoUploaded: function () {
    return this.photo.length === 0
  },
  photoUploaded: function () {
    return this.photo.length &amp;gt; 0
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nice work. Before moving on, I encourage you to repeat this step until you’re comfortable with coordinating events between child components and the parent Vue instance. This maneuver plays an integral part in the following steps. If you still don’t understand this concept, feel free to reach out on Twitter (&lt;a href=&quot;https://twitter.com/@mattrothenberg&quot; target=&quot;_blank&quot;&gt;@mattrothenberg&lt;/a&gt;) or via GitHub!&lt;/p&gt;

&lt;h2 id=&quot;step-3-componentization&quot;&gt;Step 3: Componentization&lt;/h2&gt;

&lt;p data-height=&quot;700&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;wdXMpx&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-preview=&quot;true&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Step 3: Make it Prettier [Instagram Prototype]&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/mattrothenberg/pen/wdXMpx/&quot;&gt;Step 3: Make it Prettier [Instagram Prototype]&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Vue encourages us to pull out components as much as possible. Looking at the mockup, I see a few different components.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;header&lt;/strong&gt; with the Instagram logo, “Back” and “Next” buttons&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;preview&lt;/strong&gt; of our upload photo and the applied filter&lt;/li&gt;
  &lt;li&gt;A scrollable &lt;strong&gt;list of filters&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;slider&lt;/strong&gt; to adjust the strength of the applied filters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a rough diagram for visual learners:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/component-breakdown.png&quot; alt=&quot;The Final Product&quot; class=&quot;w-100 w-50-l db center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And so, our markup should look something like the following. Note that we’re passing &lt;code class=&quot;highlighter-rouge&quot;&gt;photo&lt;/code&gt; as a prop to both the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;photo-preview&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-list&amp;gt;&lt;/code&gt; components. This should make sense, considering both components need to have an awareness of this state in order to render a preview of the uploaded photo.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;main class=&amp;quot;flex flex-column h-100&amp;quot; v-if=&amp;quot;photoUploaded&amp;quot;&amp;gt;
  &amp;lt;app-header&amp;gt;&amp;lt;/app-header&amp;gt;
  &amp;lt;photo-preview :photo=&amp;quot;photo&amp;quot;&amp;gt;&amp;lt;/photo-preview&amp;gt;
  &amp;lt;filter-list :photo=&amp;quot;photo&amp;quot;&amp;gt;&amp;lt;/filter-list&amp;gt;
&amp;lt;/main&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m going to omit the Javascript implementation of these components, since they are solely responsible (at the moment) for taking a prop and rendering markup accordingly.&lt;/p&gt;

&lt;h2 id=&quot;step-4-implement-the-filter-list-carousel&quot;&gt;Step 4: Implement the Filter List Carousel&lt;/h2&gt;
&lt;p data-height=&quot;700&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;bWKeNe&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Step 4: Filter List Carousel [Instagram Prototype]&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/mattrothenberg/pen/bWKeNe/&quot;&gt;Step 4: Filter List Carousel [Instagram Prototype]&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;grab-the-filters&quot;&gt;Grab The Filters&lt;/h3&gt;

&lt;p&gt;First things first, let’s pull in two of our third-party libraries, Flickity and CSSGram, via CDN.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/flickity/2.0.5/flickity.pkgd.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/cssgram/0.1.10/cssgram.min.css&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CSSgram is a “library for editing images with Instagram-like filters directly using CSS. [It works by] applying color and/or gradient overlays via various blending techniques to mimic filter effects.”&lt;sup id=&quot;fnref:cssgram&quot;&gt;&lt;a href=&quot;#fn:cssgram&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;As such, it provides 20+ classes that we can apply to both the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;photo-preview&amp;gt;&lt;/code&gt; component, and the thumbnails inside of our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-list&amp;gt;&lt;/code&gt; carousel.&lt;/p&gt;

&lt;p&gt;Since our prototype will make use of both the display name &lt;em&gt;and&lt;/em&gt; class name of each filter, it will be helpful to build a data structure that we can populate with this information. Let’s write a function that generates an Array of &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; objects, setting the display name, class name, and default strength (of 100) on each. In a later step, it will become clear why we generate this list with a function, instead of hard-coding it on our parent instance’s data model.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const generateFilters = () =&amp;gt; {
  return [
   { displayName: &amp;#39;1977&amp;#39;, className: &amp;#39;_1977&amp;#39;, strength: 100 },
   { displayName: &amp;#39;Aden&amp;#39;, className: &amp;#39;aden&amp;#39;, strength: 100 },
   { displayName: &amp;#39;Brannan&amp;#39;, className: &amp;#39;brannan&amp;#39;, strength: 100 }
   // etcetera
 ]
}

new Vue({
  el: &amp;#39;#instagram&amp;#39;,
  data: {
    photo: &amp;#39;&amp;#39;,
    filters: generateFilters()
  }
  // etcetera
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;filter-list
  :filters=&amp;quot;filters&amp;quot;
  :photo=&amp;quot;photo&amp;quot;&amp;gt;
&amp;lt;/filter-list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;build-the-carousel&quot;&gt;Build The Carousel&lt;/h3&gt;

&lt;p&gt;Let’s update our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-list&amp;gt;&lt;/code&gt; component so that it dynamically renders a carousel of Instagram filters. There are two steps to this dance.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; directive to iterate over the list of &lt;code class=&quot;highlighter-rouge&quot;&gt;filters&lt;/code&gt; that we received as a prop. We can pluck the &lt;code class=&quot;highlighter-rouge&quot;&gt;className&lt;/code&gt; attribute off each &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; object and apply it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;filter-preview&lt;/code&gt; DIV to create the appearance of a “thumbnail”&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;#39;filter-list&amp;#39;, {
  props: [&amp;#39;photo&amp;#39;, &amp;#39;filters&amp;#39;],
  template: `
    &amp;lt;div class=&amp;quot;filter-list pa3&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;tc dib mr3 filter&amp;quot; v-for=&amp;quot;(filter, index) in filters&amp;quot;&amp;gt;
        &amp;lt;h4 class=&amp;quot;f5 fw5 mt0 mb2&amp;quot;&amp;gt;&amp;lt;/h4&amp;gt;
      &amp;lt;div v-bind:class=&amp;quot;[filter.className]&amp;quot; class=&amp;quot;filter-preview aspect-ratio aspect-ratio--1x1&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;aspect-ratio--object cover&amp;quot; v-bind:style=&amp;quot;{backgroundImage: photoAsBackgroundImageUrl}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;`,
  // etcetera
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Instantiate the Flickity library once the component is mounted, so that our inline list of filters turns into a touch-enabled carousel&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;#39;filter-list&amp;#39;, {
  // stuff above here
  data: function () {
    return {
      flickityInstance: {}
    }
  },
  mounted: function () {
    this.flickityInstance = new Flickity(this.$el, {
      cellAlign: &amp;#39;center&amp;#39;,
      contain: true,
      initialIndex: 0,
      pageDots: false,
      setGallerySize: true,
      prevNextButtons: false
    })
  }
  // etcetera
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So far so good! We now have a beautiful carousel of filters. But nothing happens when you tap on one of them.&lt;/p&gt;

&lt;p&gt;That’s a sub-optimal user experience. Fortunately, it’s one that can be improved by &lt;strong&gt;writing more code&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;selecting-a-filter&quot;&gt;Selecting a Filter&lt;/h2&gt;

&lt;p&gt;When a user taps a filter, we want to do two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Scroll that particular filter into the center of the viewport&lt;/li&gt;
  &lt;li&gt;Apply that filter to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;photo-preview&amp;gt;&lt;/code&gt; component so that we can see what the filter actually does to the photo&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can begin by adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; directive to each carousel item inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; loop. When clicked, we’ll call our component’s &lt;code class=&quot;highlighter-rouge&quot;&gt;selectFilter&lt;/code&gt; function to handle the aforementioned tasks.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div class=&amp;quot;tc dib mr3 filter&amp;quot;
    v-for=&amp;quot;(filter, index) in filters&amp;quot;
    @click=&amp;quot;selectFilter(index)&amp;quot;&amp;gt;
  &amp;lt;!-- lol implementation details --&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;methods: {
  selectFilter: function (index) {
    this.flickityInstance.select(index)
    this.$emit(&amp;#39;filter-selected&amp;#39;, index)
  },
},&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first line of our &lt;code class=&quot;highlighter-rouge&quot;&gt;selectFilter&lt;/code&gt; function tells the Flickity library to scroll the element at the given &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; into the center of the viewport.&lt;/p&gt;

&lt;p&gt;The second line, however, is another example of child-parent communication. In this scenario, we want to tell the parent Vue instance that a user has chosen the filter living at &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; on its &lt;code class=&quot;highlighter-rouge&quot;&gt;filters&lt;/code&gt; array. Once equipped with that information, our parent Vue instance can pass the correct filter filter to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;photo-preview&amp;gt;&lt;/code&gt; component, thereby “applying” the filter to our glorious preview image.&lt;/p&gt;

&lt;p&gt;Let’s see how we can orchestrate that maneuver.&lt;/p&gt;

&lt;p&gt;First, let’s modify our parent Vue instance in a couple of ways.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add an &lt;code class=&quot;highlighter-rouge&quot;&gt;activeFilterIndex&lt;/code&gt; property to its data model and set it to zero&lt;/li&gt;
  &lt;li&gt;Add a computed property, &lt;code class=&quot;highlighter-rouge&quot;&gt;activeFilterClass&lt;/code&gt;, so that we can dynamically (and automatically) pass the correct class name to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;photo-preview&amp;gt;&lt;/code&gt; component.&lt;/li&gt;
  &lt;li&gt;Add a method, &lt;code class=&quot;highlighter-rouge&quot;&gt;setFilter&lt;/code&gt;, to handle the event we’ll emit from the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-list&amp;gt;&lt;/code&gt; component&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;#39;#instagram&amp;#39;,
  data: {
    activeFilterIndex: 0,
    photo: &amp;#39;&amp;#39;,
    filters: generateFilters()
  },
  computed: {
    activeFilterClass: function() {
      return this.filters[this.activeFilterIndex].className
    }
  },
  methods: {
    setFilter: function (filterIndex) {
      this.activeFilterIndex = filterIndex
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; directive to map the emitted event &lt;code class=&quot;highlighter-rouge&quot;&gt;filter-selected&lt;/code&gt; to the parent Vue instance’s &lt;code class=&quot;highlighter-rouge&quot;&gt;setFilter&lt;/code&gt; method. Voilà&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;filter-list
   v-on:filter-selected=&amp;quot;setFilter&amp;quot;
   :active-index=&amp;quot;activeFilterIndex&amp;quot;
   :filters=&amp;quot;filters&amp;quot;
   :photo=&amp;quot;photo&amp;quot;&amp;gt;
&amp;lt;/filter-list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;updating-the-photo-preview&quot;&gt;Updating the Photo Preview&lt;/h2&gt;

&lt;p&gt;Now for the grand finalé, let’s update the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;photo-preview&amp;gt;&lt;/code&gt; component so that it takes an additional prop, &lt;code class=&quot;highlighter-rouge&quot;&gt;active-class&lt;/code&gt;. With this class, we can dynamically apply the correct filter to the large preview image when a user selects an item in the filter carousel.&lt;/p&gt;

&lt;p&gt;Vue provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:class&lt;/code&gt; directive to add a dynamic list of classes to a DOM element.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;photo-preview
 :active-class=&amp;quot;activeFilterClass&amp;quot;
 :photo=&amp;quot;photo&amp;quot;
 &amp;gt;&amp;lt;/photo-preview&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;#39;photo-preview&amp;#39;, {
  props: [&amp;#39;photo&amp;#39;, &amp;#39;activeClass&amp;#39;],
  computed: {
    photoAsBackgroundImageUrl: function () {
      return `url(${this.photo})`
    }
  },
  template: `
    &amp;lt;div
      v-bind:class=&amp;quot;[activeClass]&amp;quot;
      class=&amp;quot;photo-preview bg-center cover flex-auto&amp;quot;
      v-bind:style=&amp;quot;{backgroundImage: photoAsBackgroundImageUrl}&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  `
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-5-implement-the-back-button&quot;&gt;Step 5: Implement the Back Button&lt;/h2&gt;
&lt;p data-height=&quot;700&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;ZKRpzV&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Step 5: Back Button [Instagram Prototype]&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/ZKRpzV/&quot;&gt;Step 5: Back Button [Instagram Prototype]&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That last feature was a doozy. Let’s build something simpler this time around, say, a back button that removes the uploaded photo and takes you back to the initial, empty state.&lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app-header&amp;gt;&lt;/code&gt; component, let’s add an &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; directive to the button that contains the “Back” icon.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;button @click=&amp;quot;goBack&amp;quot;&amp;gt;
  &amp;lt;i class=&amp;quot;material-icons&amp;quot;&amp;gt;keyboard_arrow_left&amp;lt;/i&amp;gt;
&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And let’s implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;goBack&lt;/code&gt; method that gets called when our button is clicked.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// Inside &amp;lt;app-header&amp;gt;
methods: {
  goBack: function () {
    this.$emit(&amp;#39;go-back&amp;#39;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By now you probably remember that, whenever we $emit an event, we must define a corresponding method on our parent Vue instance to handle it. In this case, we’ll set the &lt;code class=&quot;highlighter-rouge&quot;&gt;photo&lt;/code&gt; string back to an empty one, and our &lt;code class=&quot;highlighter-rouge&quot;&gt;activeFilterIndex&lt;/code&gt; to zero.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// Inside the parent Vue instance
methods: {
  resetApp: function () {
    this.photo = &amp;#39;&amp;#39;
    this.activeFilterIndex = 0
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To finalize this coordination, let’s register the &lt;code class=&quot;highlighter-rouge&quot;&gt;go-back&lt;/code&gt; event by using &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; directly on our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app-header&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;app-header v-on:go-back=&amp;quot;resetApp&amp;quot;&amp;gt;&amp;lt;/app-header&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-6-implement-the-filter-strength-slider&quot;&gt;Step 6: Implement The Filter Strength Slider&lt;/h2&gt;

&lt;p data-height=&quot;700&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;LyreEV&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Step 6: Filter Strength Slider [Instagram Prototype]&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/LyreEV/&quot;&gt;Step 6: Filter Strength Slider [Instagram Prototype]&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Phew! One more major feature and we’ll be on the home stretch.&lt;/p&gt;

&lt;p&gt;First, let’s pull in noUiSlider and its dependencies via CDN.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/9.2.0/nouislider.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/wnumb/1.1.0/wNumb.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/9.2.0/nouislider.min.css&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-slider-component&quot;&gt;The Slider Component&lt;/h3&gt;

&lt;p&gt;Next, let’s create a component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strength-slider&amp;gt;&lt;/code&gt;. This component will have a few responsibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It will appear conditionally (as a function of a user “double tapping” a filter)&lt;/li&gt;
  &lt;li&gt;When it appears, it will initialize an instance of noUiSlider&lt;/li&gt;
  &lt;li&gt;When that slider is dragged, it will emit its value (the “strength” of the filter) to the parent Vue instance&lt;/li&gt;
  &lt;li&gt;It will also show a “Done” button that, when clicked, will hide the slider and show the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-list&amp;gt;&lt;/code&gt; component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The markup for this component is fairly straightforward.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// in the Strength Slider component
template:
  `&amp;lt;div class=&amp;quot;pa5&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;slider&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;mt4 tc&amp;quot;&amp;gt;
      &amp;lt;button @click=&amp;quot;hideFilterStrength&amp;quot; class=&amp;quot;fw6 f6 ttu black bn bg-white&amp;quot;&amp;gt;Done&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;`,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once the component has mounted, we can initialize noUiSlider and hook into the library’s event system. Each noUiSlider instance emits an ‘update’ event that we can listen to and handle accordingly. In our case, on &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;, we want to $emit an event to our parent Vue instance indicating that the currently selected filter’s strength has been adjusted.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// in the Strength Slider component
mounted: function () {
  let self = this
  let sliderEl = this.$el.querySelector(&amp;#39;#slider&amp;#39;)
  let options = {
   connect: [true, false],
   tooltips: true,
   format: wNumb({
    decimals: 0,
   }),
   start: [this.activeStrength],
    step: 1,
    range: {
     &amp;#39;min&amp;#39;: [0],
     &amp;#39;max&amp;#39;: [100]
    }
  }
  let slider = noUiSlider.create(sliderEl, options)
  slider.on(&amp;#39;update&amp;#39;, function (e) {
   let newVal = e[0]
   self.$emit(&amp;#39;adjusted-filter-strength&amp;#39;, newVal)
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We also ought to implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;hideFilterStrength&lt;/code&gt; method that’s being passed to the “Done” button’s &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; directive.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;methods: {
  hideFilterStrength: function () {
    this.$emit(&amp;#39;hide-filter-strength&amp;#39;)
  }
},&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’re emitting two different events, and we haven’t yet updated our parent Vue instance! Let’s get to it.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// parent Vue component
data: {
  showingFilterStrength: false,
},
computed: {
  activeFilterStrength: function() {
    return this.filters[this.activeFilterIndex].strength
  },
},
methods: {
  hideFilterStrength: function () {
    this.showingFilterStrength = false
  },
  adjustFilterStrength: function (strength) {
    this.filters[this.activeFilterIndex].strength = strength
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally, let’s finish orchestrating the child-parent communication here with the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; directive.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;strength-slider
 v-if=&amp;quot;showingFilterStrength&amp;quot;
 :active-strength=&amp;quot;activeFilterStrength&amp;quot;
 v-on:hide-filter-strength=&amp;quot;hideFilterStrength&amp;quot;
 v-on:adjusted-filter-strength=&amp;quot;adjustFilterStrength&amp;quot;&amp;gt;
&amp;lt;/strength-slider&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-filter-list-component&quot;&gt;The Filter List Component&lt;/h3&gt;

&lt;p&gt;As currently implemented, our slider component will never appear, since the expression inside its &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt; directive, &lt;code class=&quot;highlighter-rouge&quot;&gt;showingFilterStrength&lt;/code&gt; is hard-coded to false.&lt;/p&gt;

&lt;p&gt;So, let’s update our filter carousel so that when a filter is “double tapped”, that expression evalutes to true and thus shows the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strength-slider&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;For our intents and purposes, a “double tap” is when a user selects a filter whose index matches the &lt;code class=&quot;highlighter-rouge&quot;&gt;activeFilterIndex&lt;/code&gt; attribute on our parent vue Instance. That means that users can &lt;em&gt;single&lt;/em&gt; tap any filter to apply it, and tap it once more to toggle the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strength-slider&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Here’s a GIF that should shed light on what’s happening under the hood.&lt;/p&gt;

&lt;div style=&quot;width:100%;height:0px;position:relative;padding-bottom:199.142%;&quot;&gt;&lt;iframe src=&quot;https://streamable.com/s/7j90n/crygrq&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;50%&quot; allowfullscreen=&quot;&quot; style=&quot;width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;selectFilter: function (index) {
  if (this.activeIndex === index) {
    this.$emit(&amp;#39;filter-double-tapped&amp;#39;, index)
  }

  this.flickityInstance.select(index)
  this.$emit(&amp;#39;filter-selected&amp;#39;, index)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we’re now emitting an event from the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-list&amp;gt;&lt;/code&gt; component, we have to add a handler to our parent Vue instance…&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// parent Vue instance
methods: {
  showFilterStrength: function () {
    this.showingFilterStrength = true
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…and finish the orchestration with a &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; directive on the component itself.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;filter-list
   v-if=&amp;quot;!showingFilterStrength&amp;quot;
   v-on:filter-double-tapped=&amp;quot;showFilterStrength&amp;quot;
   v-on:filter-selected=&amp;quot;setFilter&amp;quot;
   :active-index=&amp;quot;activeFilterIndex&amp;quot;
   :filters=&amp;quot;filters&amp;quot;
   :photo=&amp;quot;photo&amp;quot;&amp;gt;
&amp;lt;/filter-list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-photo-preview-component&quot;&gt;The Photo Preview Component&lt;/h3&gt;

&lt;p&gt;Our Photo Preview component has a newfound responsibility: showing the user a preview of their photo, given the selected filter &lt;strong&gt;and&lt;/strong&gt; its strength.&lt;/p&gt;

&lt;p&gt;Accordingly, we’ll need to make a few updates.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Update the &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; field on our component to render two &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s, one stacked on top of the other. We’re doing this to create a crude “mask”&lt;/li&gt;
  &lt;li&gt;Read the &lt;code class=&quot;highlighter-rouge&quot;&gt;activeFilterStrength&lt;/code&gt; value from our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strength-slider&amp;gt;&lt;/code&gt; as a prop, and use that to determine how transparent the top div should be (i.e., how “strong” the filter should appear)&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;#39;photo-preview&amp;#39;, {
  props: [&amp;#39;photo&amp;#39;, &amp;#39;activeClass&amp;#39;, &amp;#39;activeStrength&amp;#39;],
  computed: {
    photoAsBackgroundImageUrl: function () {
      return `url(${this.photo})`
    },
    filterOpacity: function () {
      return this.activeStrength / 100
    }
  },
  template: `
    &amp;lt;div class=&amp;quot;relative flex-auto h-100&amp;quot;&amp;gt;
      &amp;lt;div v-bind:style=&amp;quot;{backgroundImage: photoAsBackgroundImageUrl}&amp;quot;
           class=&amp;quot;w-100 h-100 bg-center cover absolute top-0 left-0 bottom-0 right-0 z-4&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div v-bind:class=&amp;quot;[activeClass]&amp;quot;
           v-bind:style=&amp;quot;{opacity: filterOpacity, backgroundImage: photoAsBackgroundImageUrl}&amp;quot;
           class=&amp;quot;w-100 h-100 bg-center cover absolute top-0 left-0 bottom-0 right-0 z-5&amp;quot;&amp;gt;
       &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  `
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-back-button&quot;&gt;The Back Button&lt;/h3&gt;
&lt;p&gt;Since our parent Vue instance now has more state (by keeping track of the &lt;code class=&quot;highlighter-rouge&quot;&gt;strength&lt;/code&gt; attribute on each filter object), we must reset these values when a user clicks the back button.&lt;/p&gt;

&lt;p&gt;You may recall that we generate our list of filters at runtime by passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;generateFilters&lt;/code&gt; function to our parent Vue instance’s &lt;code class=&quot;highlighter-rouge&quot;&gt;filters&lt;/code&gt; data attribute and calling it.&lt;/p&gt;

&lt;p&gt;To effectively “reset” this list of filters, let’s just do that maneuever one more time&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// parent Vue instance
methods: {
  resetApp: function () {
    this.photo = &amp;#39;&amp;#39;
    this.activeFilterIndex = 0
    this.filters = generateFilters() // hello, goodbye
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-7-the-final-act--make-it-pop-with-transitions&quot;&gt;Step 7: The Final Act – “Make it Pop” with Transitions&lt;/h2&gt;
&lt;p data-height=&quot;700&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;MmXGrd&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Step 7: Transitions [Instagram Prototype]&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/MmXGrd/&quot;&gt;Step 7: Transitions [Instagram Prototype]&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We made it to the final step. The prototype “works,” but we can add transitions here and there to make things a bit smoother. Let’s pull in our final third-party library, &lt;strong&gt;Animate.css&lt;/strong&gt;, via CDN.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;link href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, Vue doesn’t animate the entrance or exit of conditionally rendered elements (via &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt;). We can change that by wrapping said conditionally rendered components in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component. All this component asks is that you provide instructions for how the transition should work.&lt;/p&gt;

&lt;p&gt;An amazing (and in-depth) explanation of Vue transitions can be found in the official docs. For now, suffice it to say that by adding a list of classes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;enter-active-class&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;leave-active-class&lt;/code&gt; directives, we can choreograph animations.&lt;sup id=&quot;fnref:docs&quot;&gt;&lt;a href=&quot;#fn:docs&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;fade-out-empty-state--fade-in-photo-preview&quot;&gt;Fade Out Empty State / Fade In Photo Preview&lt;/h2&gt;

&lt;p&gt;This one is easy! Let’s wrap our sibling &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;empty-state&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tags in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; tag. We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fadeIn&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fadeOut&lt;/code&gt; classes provided by Animate.css as the enter / leave classes respectively.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;transition
  name=&amp;quot;mainStageTransition&amp;quot;
  enter-active-class=&amp;quot;animated fadeIn&amp;quot;
  leave-active-class=&amp;quot;animated fadeOut&amp;quot;&amp;gt;
  &amp;lt;empty-state v-if=&amp;quot;noPhotoUploaded&amp;quot;&amp;gt;&amp;lt;/empty-state&amp;gt;
  &amp;lt;main v-if=&amp;quot;photoUploaded&amp;quot;&amp;gt;
    &amp;lt;!-- implementation details --&amp;gt;
  &amp;lt;/main&amp;gt;
&amp;lt;/transition&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;fade-out-filter-list--fade-in-strength-slider&quot;&gt;Fade Out Filter List / Fade In Strength Slider&lt;/h3&gt;

&lt;p&gt;This one is easy, too! Let’s wrap our sibling &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filter-list&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strength-slider&amp;gt;&lt;/code&gt; components in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; tag. Again we’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;fadeIn&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fadeOut&lt;/code&gt; to choreograph the transition. This time, though, we’ll provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;out-in&lt;/code&gt; mode so that the active element transitions out first, then when complete, the new element transitions in.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;transition
  name=&amp;quot;filterAreaTransition&amp;quot;
  mode=&amp;quot;out-in&amp;quot;
  enter-active-class=&amp;quot;animated fadeIn&amp;quot;
  leave-active-class=&amp;quot;animated fadeOut&amp;quot;&amp;gt;
  &amp;lt;filter-list
    v-if=&amp;quot;!showingFilterStrength&amp;quot;&amp;gt;
  &amp;lt;/filter-list&amp;gt;
  &amp;lt;strength-slider
    v-if=&amp;quot;showingFilterStrength&amp;quot;&amp;gt;
  &amp;lt;/strength-slider&amp;gt;
&amp;lt;/transition&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;fade-out-header--fade-in-active-filter-name&quot;&gt;Fade Out Header / Fade In Active Filter Name&lt;/h3&gt;

&lt;p&gt;This one is a bit more complex. When the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strength-filter&amp;gt;&lt;/code&gt; component is visible, we want to hide the back button, Instagram logo, and next button, and instead show the active filter name. We’ll need to make a few code changes to achieve this effect.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a computed property to our parent Vue instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;activeFilterName&lt;/code&gt;, which returns the &lt;code class=&quot;highlighter-rouge&quot;&gt;displayName&lt;/code&gt; attribute of the selected filter object&lt;/li&gt;
  &lt;li&gt;Pass &lt;code class=&quot;highlighter-rouge&quot;&gt;showingFilterStrength&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;activeFilterName&lt;/code&gt; as props to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app-header&amp;gt;&lt;/code&gt; component&lt;/li&gt;
  &lt;li&gt;Conditionally render the default elements (logo &amp;amp; buttons) and the active filter name in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app-header&amp;gt;&lt;/code&gt; component&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// parent Vue instance
computed {
  activeFilterName: function () {
    return this.filters[this.activeFilterIndex].displayName
  },
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, let’s update the template of our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app-header&amp;gt;&lt;/code&gt; component, adding two &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; components for the different states that our header will live in&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div class=&amp;quot;flex items-center relative overflow-hidden app-header bb b--black-10&amp;quot;&amp;gt;
    &amp;lt;transition
      mode=&amp;quot;out-in&amp;quot;
      name=&amp;quot;headerTransition&amp;quot;
      enter-active-class=&amp;quot;animated fadeInUp&amp;quot;
      leave-active-class=&amp;quot;animated fadeOutDown&amp;quot;&amp;gt;
      &amp;lt;div v-if=&amp;quot;!showingFilter&amp;quot; class=&amp;quot;absolute top-0 left-0 right-0 bottom-0 w-100 flex items-center&amp;quot;&amp;gt;
       &amp;lt;!-- back button, instagram logo, next button --&amp;gt;
     &amp;lt;/div&amp;gt;
    &amp;lt;/transition&amp;gt;
    &amp;lt;transition
      mode=&amp;quot;out-in&amp;quot;
      name=&amp;quot;filterTrans&amp;quot;
      enter-active-class=&amp;quot;animated fadeInUp&amp;quot;
      leave-active-class=&amp;quot;animated fadeOutDown&amp;quot;&amp;gt;
       &amp;lt;div v-if=&amp;quot;showingFilter&amp;quot; class=&amp;quot;pl3&amp;quot;&amp;gt;
          
       &amp;lt;/div&amp;gt;
      &amp;lt;/transition&amp;gt;
  &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;We made it! Thanks so much for giving this article a read – I hope it wasn’t too painful.&lt;/p&gt;

&lt;p&gt;I apologize if any of the code snippets or explanations were unclear. &lt;strong&gt;Please&lt;/strong&gt; don’t hesitate to reach out with questions, comments, or general feedback.&lt;/p&gt;

&lt;p&gt;Until then, Happy Prototyping!&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:cssgram&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/una/CSSgram&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CSSGram&lt;/code&gt; on GitHub&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:cssgram&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:docs&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes&quot; target=&quot;_blank&quot;&gt;Vue JS Documentation&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:docs&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">To those who claim you can’t prototype mobile user interfaces with the tools of the web, I raise you the following tutorial. In this play, we’ll use Vue JS to re-create a workflow from Instagram’s mobile app: uploading a photo and applying a filter.</summary></entry><entry><title type="html">Animate with Swagger (and Stagger)</title><link href="/prototyping-playbook/staggered-animations" rel="alternate" type="text/html" title="Animate with Swagger (and Stagger)" /><published>2017-05-12T09:00:00-04:00</published><updated>2017-05-12T09:00:00-04:00</updated><id>/prototyping-playbook/staggered-animations</id><content type="html" xml:base="/prototyping-playbook/staggered-animations">&lt;p&gt;Animations make the web a far more interesting place. In this post, we’ll learn how to roll our own staggered list animation with Vanilla JS and CSS. No frameworks or plugins. 60 frames-per-second or bust!&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;You’re building a health and fitness web application, and you’d like to enhance the UI by adding animation. You’ve designed a step-count leaderboard, but want each list item to fade in one after the other (staggering between each iteration).&lt;/p&gt;

&lt;h2 id=&quot;mockup&quot;&gt;Mockup&lt;/h2&gt;

&lt;div style=&quot;width:100%;height:0px;position:relative;padding-bottom:56.237%;&quot;&gt;&lt;iframe src=&quot;https://streamable.com/s/kts6b/rcvaxo&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; allowfullscreen=&quot;&quot; style=&quot;width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;

&lt;h3 id=&quot;designing--animating-the-bars&quot;&gt;Designing &amp;amp; Animating The Bars&lt;/h3&gt;

&lt;p&gt;From a design perspective, we’re building a horizontal bar chart (sorted by longest to shortest). Each bar has a dynamic &lt;strong&gt;width&lt;/strong&gt;, a fake &lt;strong&gt;name&lt;/strong&gt;, and a fake &lt;strong&gt;step count&lt;/strong&gt;. Instead of hard-coding each bar’s width as an inline style, we’ll assign a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;data-width&lt;/code&gt; attribute that can be read in our Javascript.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div
    data-width=&amp;quot;100&amp;quot;
    class=&amp;quot;bar mb2 h2 br4 flex items-center justify-between pr3&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;name mv0 fw6 f7 white&amp;quot;&amp;gt;
      &amp;lt;!-- Name to be set via Javascript --&amp;gt;
    &amp;lt;/h1&amp;gt;
    &amp;lt;h2 class=&amp;quot;steps mv0 fw4 f7 white-50&amp;quot;&amp;gt;
      &amp;lt;!-- Steps to be set via Javascript --&amp;gt;
    &amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where the magic happens, though, is the CSS for our &lt;code class=&quot;highlighter-rouge&quot;&gt;.bar&lt;/code&gt; class. We apply a gradient to make it look pretty, and add a keyframe animation that tweens the bar from zero to full opacity.&lt;/p&gt;

&lt;p&gt;You’ll note that we’re omitting both the &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-duration&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; property from our CSS. In the next step, you’ll see how we can use Javascript to add these values dynamically and give our animation a wonderful “staggered” effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB: You don’t need Javascript to achieve this effect. Sass / SCSS can help you get the same outcome&lt;/strong&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.bar {
  animation: grow-bar cubic-bezier(0.23, 1, 0.32, 1) forwards;
  background: linear-gradient(to left, #004e92, #000428);
  opacity: 0;
}

@keyframes grow-bar {
  0% {
    width: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In our Javascript, we’re iterating over the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bar&lt;/code&gt; elements on the page, and performing a few actions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt; the bar’s &lt;code class=&quot;highlighter-rouge&quot;&gt;data-width&lt;/code&gt; attribute and &lt;strong&gt;set&lt;/strong&gt; the element’s width accordingly&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set&lt;/strong&gt; the bar’s &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-duration&lt;/code&gt; to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;BAR_ANIM_DURATION&lt;/code&gt;. By creating this variable, we can adjust the speed of our animation (for debugging/fine-tuning) by tweaking one variable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Calculate&lt;/strong&gt; and &lt;strong&gt;set&lt;/strong&gt; a staggered animation-delay via some simple arithmetic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/bar-delay.png&quot; alt=&quot;Dynamic Animation Delay&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that with each iteration of the &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;, loop, the &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; property increases ever-so-slightly, giving us a staggered effect. If we had hard-coded a constant value in our loop, the bars would all fade in at the exact same time.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let bars = document.querySelectorAll(&amp;#39;.bar&amp;#39;)
const NUM_ELEMENTS = bars.length
const BAR_ANIM_DURATION = .65

bars.forEach((bar, index) =&amp;gt; {
  // Read &amp;#39;data-width&amp;#39; and set the bar&amp;#39;s width
  bar.style.width = `${bar.getAttribute(&amp;#39;data-width&amp;#39;)}%`

  // Set &amp;#39;animation-duration&amp;#39;
  bar.style.animationDuration = `${BAR_ANIM_DURATION}s`

  // Calculate Staggered Delay
  let barDelay = index * (BAR_ANIM_DURATION / NUM_ELEMENTS)

  // Set Staggered Delay
  bar.style.animationDelay = `${barDelay}s`
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;animating-the-names&quot;&gt;Animating The Names&lt;/h3&gt;

&lt;p&gt;We’ll take a similar approach to animate the names inside of each bar. In our CSS, let’s add another keyframe animation that tweens each name from zero to full opacity, and moves it to a neutral X position.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.name {
  animation: slide-name ease forwards;
  opacity: 0;
}

@keyframes slide-name {
  0% {
    transform: translateX(-25px);
  }

  100% {
    opacity: 1;
    transform: translateX(0px);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned before, we can leverage our ability to &lt;a href=&quot;/prototyping-playbook/fake-it-til-you-make-it&quot; target=&quot;_blank&quot;&gt;work with fake data&lt;/a&gt; to assign a random name to each bar. Moreover, we can perform a similar calculation to stagger the animation of each name element.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// Animate names quicker than bars
const NAME_ANIM_DURATION = .25

bars.forEach((bar, index) =&amp;gt; {
  let name = bar.querySelector(&amp;#39;.name&amp;#39;)

  // Assign a fake name
  name.innerText = faker.name.findName()

  // Set &amp;#39;animation-duration&amp;#39;
  name.style.animationDuration = `${NAME_ANIM_DURATION}s`

  // Calculate Staggered Delay
  let barDelay = index * (BAR_ANIM_DURATION / NUM_ELEMENTS)
  let nameDelay = .15 + barDelay + (index * (NAME_ANIM_DURATION / NUM_ELEMENTS))

  // Set Staggered Delay
  name.style.animationDelay = `${nameDelay}s`
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;animating-the-step-counts&quot;&gt;Animating The Step Counts&lt;/h3&gt;

&lt;p&gt;By now, you should be a pro at this. Let’s add another keyframe animation that tweens each step count from zero to full opacity, and scales it up from quarter to full size.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;.steps {
  animation: grow-steps ease forwards;
  opacity: 0;
}

@keyframes grow-steps {
  0% {
    transform: scale(.25);
  }

  100% {
    opacity: 1;
    transform: scale(1);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And in our Javascript, let’s perform that same calculation to create a staggered animation delay.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const STEPS_ANIM_DURATION = .25

bars.forEach((bar, index) =&amp;gt; {
  let steps = bar.querySelector(&amp;#39;.steps&amp;#39;)

  // Add a bogus step count
  steps.innerText = (NUM_ELEMENTS - index) * 1000

  // Set &amp;#39;animation-duration&amp;#39;
  steps.style.animationDuration = `${STEPS_ANIM_DURATION}s`

  // Calculate Staggered Delay
  let barDelay = index * (BAR_ANIM_DURATION / NUM_ELEMENTS)
  let nameDelay = .15 + barDelay + (index * (NAME_ANIM_DURATION / NUM_ELEMENTS))
  let stepsDelay = nameDelay + (index * (STEPS_ANIM_DURATION / NUM_ELEMENTS))

  // Set Staggered Delay
  steps.style.animationDelay = `${stepsDelay}s`
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;QvrwPW&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;QvrwPW&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/QvrwPW/&quot;&gt;QvrwPW&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Animations make the web a far more interesting place. In this post, we’ll learn how to roll our own staggered list animation with Vanilla JS and CSS. No frameworks or plugins. 60 frames-per-second or bust!</summary></entry><entry><title type="html">Fake it ‘til you Make it</title><link href="/prototyping-playbook/fake-it-til-you-make-it" rel="alternate" type="text/html" title="Fake it 'til you Make it" /><published>2017-05-05T16:23:10-04:00</published><updated>2017-05-05T16:23:10-04:00</updated><id>/prototyping-playbook/fake-it-til-you-make-it</id><content type="html" xml:base="/prototyping-playbook/fake-it-til-you-make-it">&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; an essay on the merit (or lack thereof) of using fake data in your prototype. Instead, this play gives you the tools you need to elevate your game from Lorem Ipsum to data that at least &lt;em&gt;resembles&lt;/em&gt; what will eventually go in the interface you’re building&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;You’ve mastered the art of &lt;a href=&quot;/prototyping-playbook/working-with-tabular-data&quot;&gt;working with tabular data&lt;/a&gt;. This time, though, you don’t have a CSV export handy, and need to populate a table with around ~25 rows of sample data. You know the general shape of the data, but need a means of generating it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/fake-data.png&quot; alt=&quot;The Final Product&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;
&lt;p&gt;As with the aforementioned play, we start by identifying a schema to represent the data. Each table row should show the user’s &lt;strong&gt;avatar&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;email&lt;/strong&gt;, and &lt;strong&gt;favorite color&lt;/strong&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let user = {
  name: &amp;#39;Matt Rothenberg&amp;#39;,
  avatar: &amp;#39;http://placehold.it/50x50&amp;#39;,
  email: &amp;#39;hello@mattrothenberg.com&amp;#39;,
  color: &amp;#39;#ffa2a2&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll leverage a tool called &lt;a href=&quot;https://github.com/marak/faker.js&quot; target=&quot;_blank&quot;&gt;Faker.js&lt;/a&gt; to generate as much fake data as we’d like. Faker can generate a wide variety of fake data, and offers an intuitive API for doing so. Let’s replace the hard-coded user object above with a &lt;em&gt;function&lt;/em&gt; that generates a fake user instead.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function buildFakeUser() {
  return {
    name: faker.internet.userName(),
    avatar: faker.internet.avatar(),
    email: faker.internet.email(),
    color: faker.internet.color()
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now when we call that function, we get a random user!&lt;/p&gt;
&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let user = buildFakeUser()
console.log(user)
/*
  Object {
    name: &amp;quot;Mae65&amp;quot;
    avatar: &amp;quot;https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg&amp;quot;,
    email: &amp;quot;Arch_Considine@yahoo.com&amp;quot;,
    color: &amp;quot;#1b327b&amp;quot;,
  }
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our data set is ready. Let’s get to prototyping!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build a list of fake users&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let users = []

for (var i = 0; i &amp;lt; 25; i++) {
  users.push( buildFakeUser() )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Write a function that takes a user object and returns the corresponding table row markup (interpolating the &lt;strong&gt;avatar&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, and &lt;strong&gt;email&lt;/strong&gt;, and &lt;strong&gt;color&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function generateTableRow (user) {
  return `
    &amp;lt;tr&amp;gt;
      &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;img class=&amp;quot;br-100 w2 h2 mr2&amp;quot; src=&amp;quot;${user.avatar}&amp;quot;/&amp;gt;
          ${user.name}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
      &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        ${user.email}
      &amp;lt;/td&amp;gt;
      &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;div
            class=&amp;quot;w1 h1 mr2&amp;quot;
            style=&amp;quot;background-color: ${user.color}&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;
          ${user.color}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  `
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate over our Array of users using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;&lt;sup id=&quot;fnref:foreach&quot;&gt;&lt;a href=&quot;#fn:foreach&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;users.forEach(user =&amp;gt; {
  let tableRow = generateTableRow(user)
  tableBody.insertAdjacentHTML(&amp;quot;beforeend&amp;quot;, tableRow)
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;wdrVgM&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Fake Data - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/wdrVgM/&quot;&gt;Fake Data - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationvue-js&quot;&gt;Implementation — Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance, taking note to:
    &lt;ul&gt;
      &lt;li&gt;Initialize an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; array on the instance’s data property&lt;/li&gt;
      &lt;li&gt;Hook into the instance’s &lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt; life cycle event in order to fill the &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; array with fake data&lt;sup id=&quot;fnref:lifecycle&quot;&gt;&lt;a href=&quot;#fn:lifecycle&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;quot;#app&amp;quot;,
  data: {
    users: []
  },
  created: function() {
    for (var i = 0; i &amp;lt; 25; i++) {
      this.users.push(buildFakeUser());
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Define a &lt;code class=&quot;highlighter-rouge&quot;&gt;user-table-row&lt;/code&gt; component to represent a given row of fake user data&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;#39;user-table-row&amp;#39;, {
  props: [&amp;#39;user&amp;#39;],
  template: `
  &amp;lt;tr&amp;gt;
    &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
        &amp;lt;img class=&amp;quot;br-100 w2 h2 mr2&amp;quot; :src=&amp;quot;user.avatar&amp;quot;/&amp;gt;

      &amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
  
    &amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;flex items-center&amp;quot;&amp;gt;
        &amp;lt;div
          class=&amp;quot;w1 h1 mr2&amp;quot;
          v-bind:style=&amp;quot;{backgroundColor: user.color}&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
        
      &amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
`
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate over the instance’s &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; property in our template using &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; syntax. Due to a template parsing caveat in Vue, we must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; attribute to define which component should be rendered.&lt;sup id=&quot;fnref:caveat&quot;&gt;&lt;a href=&quot;#fn:caveat&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;tbody&amp;gt;
  &amp;lt;tr is=&amp;quot;user-table-row&amp;quot; v-for=&amp;quot;user in users&amp;quot; :user=&amp;quot;user&amp;quot;&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;gWXoZP&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Fake Data - Vue JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/gWXoZP/&quot;&gt;Fake Data - Vue JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTable&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;It should accept an array of users as a property&lt;/li&gt;
      &lt;li&gt;It should render a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTableRow&lt;/code&gt; component for each user in the &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const UserTable = ({users}) =&amp;gt; {
  return(
    &amp;lt;table className=&amp;quot;bg-white w-100 data-table f6&amp;quot; cellspacing=&amp;quot;0&amp;quot;&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th className=&amp;quot;tl pa3 bb b--black-10&amp;quot;&amp;gt;User&amp;lt;/th&amp;gt;
          &amp;lt;th className=&amp;quot;tl pa3 bb b--black-10&amp;quot;&amp;gt;Email&amp;lt;/th&amp;gt;
          &amp;lt;th className=&amp;quot;tl pa3 bb b--black-10&amp;quot;&amp;gt;Fav Color&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/thead&amp;gt;
      &amp;lt;tbody&amp;gt;
        {
          users.map(function (user) {
            return &amp;lt;UserTableRow user={user}&amp;gt;&amp;lt;/UserTableRow&amp;gt;
          })
        }
      &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create another stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;UserTableRow&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;It should accept a single user object as a property&lt;/li&gt;
      &lt;li&gt;It should render out &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; markup accordingly&lt;/li&gt;
      &lt;li&gt;In React, the HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. At the top of our render function, we can build that object by interpolating the &lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt; attribute on our user prop.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const UserTableRow = ({user}) =&amp;gt; {
  let favColorStyle = {
    backgroundColor: user.color
  }
  return (
    &amp;lt;tr&amp;gt;
      &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;img className=&amp;quot;br-100 w2 h2 mr2&amp;quot; src={user.avatar}/&amp;gt;
          {user.name}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
      &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        {user.email}
      &amp;lt;/td&amp;gt;
      &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
        &amp;lt;div className=&amp;quot;flex items-center&amp;quot;&amp;gt;
          &amp;lt;div className=&amp;quot;w1 h1 mr2&amp;quot; style={favColorStyle}&amp;gt;&amp;lt;/div&amp;gt;
          {user.color}
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;JNOLdR&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-preview=&quot;true&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Fake Data - React JS&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/JNOLdR/&quot;&gt;Fake Data - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:foreach&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=example&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:foreach&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lifecycle&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks&quot; target=&quot;_blank&quot;&gt;Vue Lifecycle Events&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:lifecycle&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:caveat&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/components.html#DOM-Template-Parsing-Caveats&quot; target=&quot;_blank&quot;&gt;Template Parsing Caveat&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:caveat&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">This is not an essay on the merit (or lack thereof) of using fake data in your prototype. Instead, this play gives you the tools you need to elevate your game from Lorem Ipsum to data that at least resembles what will eventually go in the interface you’re building</summary></entry><entry><title type="html">Working with Tabular Data</title><link href="/prototyping-playbook/working-with-tabular-data" rel="alternate" type="text/html" title="Working with Tabular Data" /><published>2017-05-04T16:23:10-04:00</published><updated>2017-05-04T16:23:10-04:00</updated><id>/prototyping-playbook/working-with-data</id><content type="html" xml:base="/prototyping-playbook/working-with-tabular-data">&lt;p&gt;Designing tables in Sketch can be downright frustrating. And despite the myriad plugins that advertise “[an] easy way to populate your design with meaningful data,” I’m convinced that code is often a better tool for the job. This play will get you up and iterating over data sets with Javascript, like a pro, in ~5 minutes.&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Let’s suppose you’re designing a dashboard and you need to turn a raw, CSV export of project data into a beautiful table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/working-with-data.png&quot; alt=&quot;The Final Product&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;
&lt;p&gt;The key to this play is identifying a schema to represent your data. Luckily, if you have a CSV dump to work with, the schema is likely right before your eyes.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;Name,Budget,Lead
Uber for Cats,$1,000,000,Jane Smith
Twitter for Puppies,$10,000,000,John Doe
Lyft for Fish,$15,000,000,Sally Stevenson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each row of data has a &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;budget&lt;/strong&gt;, and &lt;strong&gt;lead&lt;/strong&gt;. And so, we can represent any given row of our dataset as a Javascript Object, using those descriptors as properties:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let project = {
  name: &amp;#39;Uber for Cats&amp;#39;,
  budget: &amp;#39;$1,000,000&amp;#39;,
  lead: &amp;#39;Jane Smith&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, we can collect each individual project object in a Javascript Array:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let projects = [
  {
    name: &amp;#39;Uber for Cats&amp;#39;,
    budget: &amp;#39;$1,000,000&amp;#39;,
    lead: &amp;#39;Jane Smith&amp;#39;
  },
  {
    name: &amp;#39;Twitter for Puppies&amp;#39;,
    budget: &amp;#39;$10,000,000&amp;#39;,
    lead: &amp;#39;John Doe&amp;#39;
  },
  {
    name: &amp;#39;Lyft for Fish&amp;#39;,
    budget: &amp;#39;$15,000,000&amp;#39;,
    lead: &amp;#39;Sally Stevenson&amp;#39;
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’re done with the hard part. Let’s see how to get this list of projects onto the page.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Iterate over our Array of projects using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;&lt;sup id=&quot;fnref:foreach&quot;&gt;&lt;a href=&quot;#fn:foreach&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;For each project, build a template literal that represents a table row, interpolating the &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;budget&lt;/strong&gt;, and &lt;strong&gt;lead&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;let tableRow = `
&amp;lt;tr&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
    ${project.name}
  &amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
    ${project.budget}
  &amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;
    ${project.lead}
  &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
`&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Insert the newly created table row into the DOM using &lt;code class=&quot;highlighter-rouge&quot;&gt;insertAdjacentHTML&lt;/code&gt;&lt;sup id=&quot;fnref:insertadjacent&quot;&gt;&lt;a href=&quot;#fn:insertadjacent&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;mmmmYY&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Table - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/mmmmYY/&quot;&gt;Table - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementation---vue-js&quot;&gt;Implementation - Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance, passing our array of projects to its data attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Vue({
  el: &amp;#39;#app&amp;#39;,
  data: {
    projects: [
      {
        name: &amp;#39;Uber for Cats&amp;#39;,
        budget: &amp;#39;$1,000,000&amp;#39;,
        lead: &amp;#39;Jane Smith&amp;#39;
      },
      // etcetera
    ]
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; syntax in our HTML to iterate over our array of projects and display each one&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;tr v-for=&amp;quot;project in projects&amp;quot;&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{{ project.name }}&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{{ project.budget }}&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{{ project.lead }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;RVVgrX&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-preview=&quot;true&quot; data-pen-title=&quot;Table - Vue.js&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/RVVgrX/&quot;&gt;Table - Vue.js&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ProjectsTable&amp;gt;&lt;/code&gt; . This component should accept a list of projects as a property.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;const ProjectsTable = ({projects}) =&amp;gt; (
  // nothing to see here
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Map over the list of projects and return a table row for each, interpolating the name, budget, and lead.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;tbody&amp;gt;
  {
    projects.map((project) =&amp;gt; {
      return(
        &amp;lt;tr&amp;gt;
          &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{ project.name }&amp;lt;/td&amp;gt;
          &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{ project.budget }&amp;lt;/td&amp;gt;
          &amp;lt;td className=&amp;quot;pa3 bb b--black-10&amp;quot;&amp;gt;{ project.lead }&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      )
    })
  }
&amp;lt;/tbody&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;wddeWG&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Table - React JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/wddeWG/&quot;&gt;Table - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:foreach&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=example&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:foreach&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:insertadjacent&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insertAdjacentHTML&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:insertadjacent&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Designing tables in Sketch can be downright frustrating. And despite the myriad plugins that advertise “[an] easy way to populate your design with meaningful data,” I’m convinced that code is often a better tool for the job. This play will get you up and iterating over data sets with Javascript, like a pro, in ~5 minutes.</summary></entry><entry><title type="html">Componentization</title><link href="/prototyping-playbook/componentization" rel="alternate" type="text/html" title="Componentization" /><published>2017-05-04T16:23:10-04:00</published><updated>2017-05-04T16:23:10-04:00</updated><id>/prototyping-playbook/componentization</id><content type="html" xml:base="/prototyping-playbook/componentization">&lt;p&gt;In programs like Sketch, we keep things DRY (“don’t repeat yourself”) by turning our design decisions into “symbols.” It’s no different in front-end land, so this play will introduce you to a few different ways of encapsulating your designs as “components.”&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Let’s suppose you’re designing an activity feed for a social networking application. You’ve designed a “card” in Sketch that represents a single item in the feed, but you want to verify that your design works at scale, given a sample set of data.&lt;/p&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;
&lt;p&gt;You’ve figured out that the following chunk of markup produces a single, beautiful, “card.”&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;div class=&amp;quot;bg-white ba b--black-10 pa3&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;flex&amp;quot;&amp;gt;
    &amp;lt;img class=&amp;quot;mr2&amp;quot; src=&amp;quot;...&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;h1 class=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;Paul Smith&amp;lt;/h1&amp;gt;
      &amp;lt;ul class=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
        &amp;lt;li class=&amp;quot;dib black-50&amp;quot;&amp;gt;3 mins&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;p class=&amp;quot;f3 fw3 mt3 mb0&amp;quot;&amp;gt;
    What a time to be alive! So many front-end resources,
    so little time...
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mockup&quot;&gt;Mockup&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/prototyping-playbook/assets/img/posts/component-card.png&quot; alt=&quot;The Final Product&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Having read the play on tabular data, you’ve also identified a schema to represent your activity feed.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;let posts = [
  {
    name: &amp;quot;Paul Smith&amp;quot;,
    timeago: &amp;quot;3 mins&amp;quot;,
    avatar: &amp;quot;http://placehold.it/50x50&amp;quot;,
    status: &amp;quot;What a time to be alive! So many front-end resources...&amp;quot;
  },
  {
    name: &amp;quot;Jane Doe&amp;quot;,
    timeago: &amp;quot;1 hour&amp;quot;,
    avatar: &amp;quot;http://placehold.it/50x50&amp;quot;,
    status: &amp;quot;Does anyone actually use Facebook stories?&amp;quot;
  },
  {
    name: &amp;quot;Alex Jackson&amp;quot;,
    timeago: &amp;quot;2 hours&amp;quot;,
    avatar: &amp;quot;http://placehold.it/50x50&amp;quot;,
    status: &amp;quot;Best slice of pizza in NYC? Go.&amp;quot;
  }
];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With our schema in place, let’s get to the implementations.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write a function that takes a post object and returns a chunk of markup with the &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;timeago&lt;/strong&gt;, &lt;strong&gt;avatar&lt;/strong&gt;, and &lt;strong&gt;status&lt;/strong&gt; properties interpolated accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function post_markup(post) {
  return `
  &amp;lt;div class=&amp;quot;bg-white ba b--black-10 pa3 mb3&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;flex&amp;quot;&amp;gt;
      &amp;lt;img class=&amp;quot;mr2&amp;quot; src=&amp;quot;${post.avatar}&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;h1 class=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;${post.name}&amp;lt;/h1&amp;gt;
        &amp;lt;ul class=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
          &amp;lt;li class=&amp;quot;dib black-50&amp;quot;&amp;gt;${post.timeago}&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;f3 fw3 mv3&amp;quot;&amp;gt;${post.status}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
`
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate over the array of posts using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;&lt;sup id=&quot;fnref:foreach&quot;&gt;&lt;a href=&quot;#fn:foreach&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;For each post, call the &lt;code class=&quot;highlighter-rouge&quot;&gt;post_markup&lt;/code&gt; function and insert the return value into the DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;posts.forEach(post =&amp;gt; {
  let postElement = post_markup(post)
  stage.insertAdjacentHTML(&amp;quot;beforeend&amp;quot;, postElement);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;JNWoZN&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Componentization - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/JNWoZN/&quot;&gt;Componentization - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationvue-js&quot;&gt;Implementation — Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance, passing our array of posts to its &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;quot;#app&amp;quot;, // DOM element that wraps our list
  data: {
    posts: posts // our posts array from earlier
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Define a Post component that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; object as its sole property and renders our post markup accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.component(&amp;quot;Post&amp;quot;, { // so we can access it in our markup
  props: [&amp;quot;post&amp;quot;], // each post component gets a post :)
  template: `
    &amp;lt;div class=&amp;quot;bg-white ba b--black-10 pa3 mb3&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;flex&amp;quot;&amp;gt;
        &amp;lt;img class=&amp;quot;mr2&amp;quot; :src=&amp;quot;post.avatar&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h1 class=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt;
          &amp;lt;ul class=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
            &amp;lt;li class=&amp;quot;dib black-50&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;p class=&amp;quot;f3 fw3 mv3&amp;quot;&amp;gt;
        
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  ` // please render this template
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Post/&amp;gt;&lt;/code&gt; component to our HTML, and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; directive to iterate over our global array of posts&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;Post v-for=&amp;quot;post in posts&amp;quot; :post=&amp;quot;post&amp;quot;&amp;gt;&amp;lt;/Post&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;zwZGxz&quot; data-default-tab=&quot;result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Componentization - Vue JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/zwZGxz/&quot;&gt;Componentization - Vue JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Post&amp;gt;&lt;/code&gt; that accepts one post as a property&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const Post = ({post}) =&amp;gt; {
  return(
    &amp;lt;div className=&amp;quot;bg-white ba b--black-10 pa3 mb3&amp;quot;&amp;gt;
      &amp;lt;div className=&amp;quot;flex&amp;quot;&amp;gt;
        &amp;lt;img className=&amp;quot;mr2&amp;quot; src={post.avatar} alt=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h1 className=&amp;quot;f6 mv0 blue&amp;quot;&amp;gt;{post.name}&amp;lt;/h1&amp;gt;
          &amp;lt;ul className=&amp;quot;mb0 mt1 pl0 list f6&amp;quot;&amp;gt;
            &amp;lt;li className=&amp;quot;dib black-50&amp;quot;&amp;gt;{post.timeago}&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;p className=&amp;quot;f3 fw3 mv3&amp;quot;&amp;gt;
        { post.status }
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Make another stateless functional component called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;PostList&amp;gt;&lt;/code&gt; that accepts an &lt;em&gt;array&lt;/em&gt; of posts as a property and maps over it, returning individual &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Post&amp;gt;&lt;/code&gt; components accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;const PostList = ({posts}) =&amp;gt; {
  return(
    &amp;lt;div&amp;gt;
      {
        posts.map((post) =&amp;gt; {
          return &amp;lt;Post post={post}/&amp;gt;
        })
      }
    &amp;lt;/div&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;PmpwrV&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-preview=&quot;true&quot; data-pen-title=&quot;Componentization - React JS&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/PmpwrV/&quot;&gt;Componentization - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:foreach&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=example&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on MDN&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:foreach&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">In programs like Sketch, we keep things DRY (“don’t repeat yourself”) by turning our design decisions into “symbols.” It’s no different in front-end land, so this play will introduce you to a few different ways of encapsulating your designs as “components.”</summary></entry><entry><title type="html">Simulating Asynchronous Events</title><link href="/prototyping-playbook/simulating-async-events" rel="alternate" type="text/html" title="Simulating Asynchronous Events" /><published>2017-05-04T16:23:10-04:00</published><updated>2017-05-04T16:23:10-04:00</updated><id>/prototyping-playbook/async-events</id><content type="html" xml:base="/prototyping-playbook/simulating-async-events">&lt;p&gt;Page refreshes are &lt;em&gt;so&lt;/em&gt; 2005. Single page applications (SPA) are the new hotness, and offer a variety of design challenges. One such challenge is letting users know what’s happening while a request (e.g., a form submission) does it thing. This play will give you the fundamentals needed to prototype such situations.&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;Let’s suppose you’re designing a SPA. You want to introduce a pattern where a button that triggers an asynchronous event behind the scenes shows a spinner for the duration of the request.&lt;/p&gt;

&lt;div style=&quot;width: 100%; height: 0px; position: relative; padding-bottom: 39.697%;&quot;&gt;&lt;iframe src=&quot;https://streamable.com/s/vggdh/zeqdud&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; allowfullscreen=&quot;&quot; style=&quot;width: 100%; height: 100%; position: absolute;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;rundown&quot;&gt;Rundown&lt;/h2&gt;

&lt;p&gt;The key here is to understand the “states” in which our button will live.&lt;/p&gt;

&lt;p&gt;In its &lt;strong&gt;default&lt;/strong&gt; state, the button will show the text “Submit Form”. In its &lt;strong&gt;loading&lt;/strong&gt; state, the button will hide that text and show a spinner instead.&lt;/p&gt;

&lt;p&gt;And so, we can mark up our button accordingly, wrapping the “Submit Form” text in a span tag with the class &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;, and the spinner in a span tag with the class &lt;code class=&quot;highlighter-rouge&quot;&gt;spinner&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;button class=&amp;quot;bg-blue bn white tc h3 fw6 w-100 relative&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;label&amp;quot;&amp;gt;Submit Form&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;spinner absolute top-1 bottom-1 left-0 right-0&amp;quot;&amp;gt;
    &amp;lt;!-- fancy SVG spinner goes here  --&amp;gt;
  &amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For simplicity’s sake, we can choreograph the hiding of the label / display of the spinner by toggling the class &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; on the parent button tag.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-sass&quot;&gt;button .spinner {
  opacity: 0; // Hide the spinner by default
  transition: opacity .2s ease-out;
}
button .label {
  display: block; // Show the label by default
}
button.is-loading {
  .label {
    display: none; // Hide the label when button &amp;#39;is-loading&amp;#39;
  }
  .spinner {
    opacity: 1; // Show the spinner when button &amp;#39;is-loading&amp;#39;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, we can use Javascript to trigger this choreography on &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt; of our button.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementationvanilla-js-es6&quot;&gt;Implementation — Vanilla JS (ES6)&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;showSpinner&lt;/code&gt;. The function should do a few things:
    &lt;ul&gt;
      &lt;li&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class to our button — kicking off the choreography described above.&lt;/li&gt;
      &lt;li&gt;Remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class after a duration of two seconds&lt;/li&gt;
      &lt;li&gt;Set the &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled&lt;/code&gt; attribute on our button to true while the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class is present, to prevent users from repeatedly triggering the sequence.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;function showSpinner() {
  let button = this
  let isEnabled = !button.disabled; // Is the button enabled?

  if (isEnabled) { // If so
    button.disabled = true // Disable the button
    button.classList.toggle(&amp;#39;is-loading&amp;#39;) // Toggle the class

    setTimeout(() =&amp;gt; { // And do the following after 2 seconds
      button.classList.toggle(&amp;#39;is-loading&amp;#39;) // Toggle the class
      button.disabled = false // Enable the button
    }, 2000)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt; event listener to our button which calls the showSpinner function.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;// Thou shalt do my bidding when clicked
button.addEventListener(&amp;#39;click&amp;#39;, showSpinner)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;qmmXoN&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Asynchronous Events - Vanilla JS (ES6)&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/qmmXoN/&quot;&gt;Asynchronous Events - Vanilla JS (ES6)&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationvue-js&quot;&gt;Implementation — Vue JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Construct a Vue instance and add a data property called &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; to represent our button’s loading state&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;new Vue({
  el: &amp;#39;#app&amp;#39;,
  data: {
    loading: false // Button shouldn&amp;#39;t spin by default :)
  },
  methods: {
    // nothing to see here
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Mark up our button, adding the following:
    &lt;ul&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;@click&lt;/code&gt; directive to which we can eventually attach an event listener&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;:disabled&lt;/code&gt; attribute that we can enable/disable the button as a function of the loading state&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;:class&lt;/code&gt; directive so that we can dynamically toggle the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class with respect to our loading state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;button
  @click=&amp;quot;submitForm&amp;quot;
  :disabled=&amp;quot;loading&amp;quot;
  v-bind:class=&amp;quot;{&amp;#39;is-loading&amp;#39;: loading}&amp;quot;
  class=&amp;quot;bg-blue bn white tc h3 fw6 w-100 relative&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;submitForm&lt;/code&gt; method and add it to our instance’s methods property. Like in the previous example, this method should add the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class and remove it after a duration of two seconds&lt;/li&gt;
  &lt;li&gt;Fortunately, and thanks to Vue’s two-way data binding, we no longer have to manually set our button’s &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled&lt;/code&gt; attribute since it’s a function of our instance’s state&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;methods: {
  submitForm: function() {
    let self = this;
    self.loading = true; // set the instance&amp;#39;s loading state to true

    setTimeout(() =&amp;gt; {
      self.loading = false; // set it to false
    }, 2000) // After two seconds
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;zwwpzO&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Asynchronous Events - Vue JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/zwwpzO/&quot;&gt;Asynchronous Events - Vue JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;implementationreact-js&quot;&gt;Implementation — React JS&lt;/h2&gt;

&lt;p&gt;Here’s the game plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scaffold a React component (using the traditional &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; syntax) to represent our button&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;class SpinnerButton extends React.Component {
  constructor () {
    super ()

    this.state = { // Similar to Vue&amp;#39;s &amp;#39;data&amp;#39; property
      loading: false
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Implement our component’s &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method to appease the React gods. Note that we’re only adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;is-loading&lt;/code&gt; class when our state’s &lt;code class=&quot;highlighter-rouge&quot;&gt;loading&lt;/code&gt; attribute is truthy.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;render () {
  let buttonClass

  this.state.loading ? // Are you loading?
    buttonClass = &amp;#39;is-loading&amp;#39; : // If so, add &amp;#39;is-loading&amp;#39; class
    buttonClass = &amp;#39;&amp;#39;

  return(
    &amp;lt;button
      disabled={this.state.loading} // Disable if loading
      className={&amp;quot;bg-blue bn white tc h3 fw6 w-100 relative &amp;quot; + buttonClass}&amp;gt; // Dynamically add the &amp;#39;is-loading&amp;#39; class
       {&amp;lt;!-- implementation details --&amp;gt;}
    &amp;lt;/button&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add an &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; handler to our button, and implement the function it calls&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;button onClick={this.submitForm.bind(this)}&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;submitForm () {
  let self = this
  self.toggleSpinner()

  setTimeout(() =&amp;gt; {
    self.toggleSpinner()
  }, 2000)
}
toggleSpinner () {
  this.setState({
    loading: !this.state.loading
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;oWWpGz&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;mattrothenberg&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Asynchronous Events - React JS&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/mattrothenberg/pen/oWWpGz/&quot;&gt;Asynchronous Events - React JS&lt;/a&gt; by Matt Rothenberg (&lt;a href=&quot;http://codepen.io/mattrothenberg&quot;&gt;@mattrothenberg&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Page refreshes are so 2005. Single page applications (SPA) are the new hotness, and offer a variety of design challenges. One such challenge is letting users know what’s happening while a request (e.g., a form submission) does it thing. This play will give you the fundamentals needed to prototype such situations.</summary></entry></feed>